// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PRODUCER_FBS_PRODUCER_H_
#define FLATBUFFERS_GENERATED_PRODUCER_FBS_PRODUCER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

#include "rtpParameters_generated.h"
#include "rtpStream_generated.h"

namespace FBS {
namespace Producer {

struct EnableTraceEventRequest;
struct EnableTraceEventRequestBuilder;

struct DumpResponse;
struct DumpResponseBuilder;

struct GetStatsResponse;
struct GetStatsResponseBuilder;

struct SendNotification;
struct SendNotificationBuilder;

struct Score;
struct ScoreBuilder;

struct ScoreNotification;
struct ScoreNotificationBuilder;

struct VideoOrientationChangeNotification;
struct VideoOrientationChangeNotificationBuilder;

struct KeyFrameTraceInfo;
struct KeyFrameTraceInfoBuilder;

struct FirTraceInfo;
struct FirTraceInfoBuilder;

struct PliTraceInfo;
struct PliTraceInfoBuilder;

struct RtpTraceInfo;
struct RtpTraceInfoBuilder;

struct TraceNotification;
struct TraceNotificationBuilder;

inline const ::flatbuffers::TypeTable *EnableTraceEventRequestTypeTable();

inline const ::flatbuffers::TypeTable *DumpResponseTypeTable();

inline const ::flatbuffers::TypeTable *GetStatsResponseTypeTable();

inline const ::flatbuffers::TypeTable *SendNotificationTypeTable();

inline const ::flatbuffers::TypeTable *ScoreTypeTable();

inline const ::flatbuffers::TypeTable *ScoreNotificationTypeTable();

inline const ::flatbuffers::TypeTable *VideoOrientationChangeNotificationTypeTable();

inline const ::flatbuffers::TypeTable *KeyFrameTraceInfoTypeTable();

inline const ::flatbuffers::TypeTable *FirTraceInfoTypeTable();

inline const ::flatbuffers::TypeTable *PliTraceInfoTypeTable();

inline const ::flatbuffers::TypeTable *RtpTraceInfoTypeTable();

inline const ::flatbuffers::TypeTable *TraceNotificationTypeTable();

enum class TraceType : uint8_t {
  KEYFRAME = 0,
  FIR = 1,
  NACK = 2,
  PLI = 3,
  RTP = 4,
  MIN = KEYFRAME,
  MAX = RTP
};

inline const TraceType (&EnumValuesTraceType())[5] {
  static const TraceType values[] = {
    TraceType::KEYFRAME,
    TraceType::FIR,
    TraceType::NACK,
    TraceType::PLI,
    TraceType::RTP
  };
  return values;
}

inline const char * const *EnumNamesTraceType() {
  static const char * const names[6] = {
    "KEYFRAME",
    "FIR",
    "NACK",
    "PLI",
    "RTP",
    nullptr
  };
  return names;
}

inline const char *EnumNameTraceType(TraceType e) {
  if (::flatbuffers::IsOutRange(e, TraceType::KEYFRAME, TraceType::RTP)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTraceType()[index];
}

enum class TraceDirection : uint8_t {
  DIRECTION_IN = 0,
  DIRECTION_OUT = 1,
  MIN = DIRECTION_IN,
  MAX = DIRECTION_OUT
};

inline const TraceDirection (&EnumValuesTraceDirection())[2] {
  static const TraceDirection values[] = {
    TraceDirection::DIRECTION_IN,
    TraceDirection::DIRECTION_OUT
  };
  return values;
}

inline const char * const *EnumNamesTraceDirection() {
  static const char * const names[3] = {
    "DIRECTION_IN",
    "DIRECTION_OUT",
    nullptr
  };
  return names;
}

inline const char *EnumNameTraceDirection(TraceDirection e) {
  if (::flatbuffers::IsOutRange(e, TraceDirection::DIRECTION_IN, TraceDirection::DIRECTION_OUT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTraceDirection()[index];
}

enum class TraceInfo : uint8_t {
  NONE = 0,
  KeyFrameTraceInfo = 1,
  FirTraceInfo = 2,
  PliTraceInfo = 3,
  RtpTraceInfo = 4,
  MIN = NONE,
  MAX = RtpTraceInfo
};

inline const TraceInfo (&EnumValuesTraceInfo())[5] {
  static const TraceInfo values[] = {
    TraceInfo::NONE,
    TraceInfo::KeyFrameTraceInfo,
    TraceInfo::FirTraceInfo,
    TraceInfo::PliTraceInfo,
    TraceInfo::RtpTraceInfo
  };
  return values;
}

inline const char * const *EnumNamesTraceInfo() {
  static const char * const names[6] = {
    "NONE",
    "KeyFrameTraceInfo",
    "FirTraceInfo",
    "PliTraceInfo",
    "RtpTraceInfo",
    nullptr
  };
  return names;
}

inline const char *EnumNameTraceInfo(TraceInfo e) {
  if (::flatbuffers::IsOutRange(e, TraceInfo::NONE, TraceInfo::RtpTraceInfo)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTraceInfo()[index];
}

template<typename T> struct TraceInfoTraits {
  static const TraceInfo enum_value = TraceInfo::NONE;
};

template<> struct TraceInfoTraits<FBS::Producer::KeyFrameTraceInfo> {
  static const TraceInfo enum_value = TraceInfo::KeyFrameTraceInfo;
};

template<> struct TraceInfoTraits<FBS::Producer::FirTraceInfo> {
  static const TraceInfo enum_value = TraceInfo::FirTraceInfo;
};

template<> struct TraceInfoTraits<FBS::Producer::PliTraceInfo> {
  static const TraceInfo enum_value = TraceInfo::PliTraceInfo;
};

template<> struct TraceInfoTraits<FBS::Producer::RtpTraceInfo> {
  static const TraceInfo enum_value = TraceInfo::RtpTraceInfo;
};

bool VerifyTraceInfo(::flatbuffers::Verifier &verifier, const void *obj, TraceInfo type);
bool VerifyTraceInfoVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<TraceInfo> *types);

struct EnableTraceEventRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EnableTraceEventRequestBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return EnableTraceEventRequestTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EVENTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *events() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_EVENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_EVENTS) &&
           verifier.VerifyVector(events()) &&
           verifier.VerifyVectorOfStrings(events()) &&
           verifier.EndTable();
  }
};

struct EnableTraceEventRequestBuilder {
  typedef EnableTraceEventRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_events(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> events) {
    fbb_.AddOffset(EnableTraceEventRequest::VT_EVENTS, events);
  }
  explicit EnableTraceEventRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EnableTraceEventRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EnableTraceEventRequest>(end);
    fbb_.Required(o, EnableTraceEventRequest::VT_EVENTS);
    return o;
  }
};

inline ::flatbuffers::Offset<EnableTraceEventRequest> CreateEnableTraceEventRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> events = 0) {
  EnableTraceEventRequestBuilder builder_(_fbb);
  builder_.add_events(events);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EnableTraceEventRequest> CreateEnableTraceEventRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *events = nullptr) {
  auto events__ = events ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*events) : 0;
  return FBS::Producer::CreateEnableTraceEventRequest(
      _fbb,
      events__);
}

struct DumpResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DumpResponseBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DumpResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_KIND = 6,
    VT_TYPE = 8,
    VT_RTPPARAMETERS = 10,
    VT_RTPMAPPING = 12,
    VT_RTPSTREAMS = 14,
    VT_TRACEEVENTTYPES = 16,
    VT_PAUSED = 18
  };
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  FBS::RtpParameters::MediaKind kind() const {
    return static_cast<FBS::RtpParameters::MediaKind>(GetField<uint8_t>(VT_KIND, 0));
  }
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  const FBS::RtpParameters::RtpParameters *rtpParameters() const {
    return GetPointer<const FBS::RtpParameters::RtpParameters *>(VT_RTPPARAMETERS);
  }
  const FBS::RtpParameters::RtpMapping *rtpMapping() const {
    return GetPointer<const FBS::RtpParameters::RtpMapping *>(VT_RTPMAPPING);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<FBS::RtpStream::Dump>> *rtpStreams() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FBS::RtpStream::Dump>> *>(VT_RTPSTREAMS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *traceEventTypes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TRACEEVENTTYPES);
  }
  bool paused() const {
    return GetField<uint8_t>(VT_PAUSED, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<uint8_t>(verifier, VT_KIND, 1) &&
           VerifyOffsetRequired(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffsetRequired(verifier, VT_RTPPARAMETERS) &&
           verifier.VerifyTable(rtpParameters()) &&
           VerifyOffsetRequired(verifier, VT_RTPMAPPING) &&
           verifier.VerifyTable(rtpMapping()) &&
           VerifyOffset(verifier, VT_RTPSTREAMS) &&
           verifier.VerifyVector(rtpStreams()) &&
           verifier.VerifyVectorOfTables(rtpStreams()) &&
           VerifyOffsetRequired(verifier, VT_TRACEEVENTTYPES) &&
           verifier.VerifyVector(traceEventTypes()) &&
           verifier.VerifyVectorOfStrings(traceEventTypes()) &&
           VerifyField<uint8_t>(verifier, VT_PAUSED, 1) &&
           verifier.EndTable();
  }
};

struct DumpResponseBuilder {
  typedef DumpResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(DumpResponse::VT_ID, id);
  }
  void add_kind(FBS::RtpParameters::MediaKind kind) {
    fbb_.AddElement<uint8_t>(DumpResponse::VT_KIND, static_cast<uint8_t>(kind), 0);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(DumpResponse::VT_TYPE, type);
  }
  void add_rtpParameters(::flatbuffers::Offset<FBS::RtpParameters::RtpParameters> rtpParameters) {
    fbb_.AddOffset(DumpResponse::VT_RTPPARAMETERS, rtpParameters);
  }
  void add_rtpMapping(::flatbuffers::Offset<FBS::RtpParameters::RtpMapping> rtpMapping) {
    fbb_.AddOffset(DumpResponse::VT_RTPMAPPING, rtpMapping);
  }
  void add_rtpStreams(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBS::RtpStream::Dump>>> rtpStreams) {
    fbb_.AddOffset(DumpResponse::VT_RTPSTREAMS, rtpStreams);
  }
  void add_traceEventTypes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> traceEventTypes) {
    fbb_.AddOffset(DumpResponse::VT_TRACEEVENTTYPES, traceEventTypes);
  }
  void add_paused(bool paused) {
    fbb_.AddElement<uint8_t>(DumpResponse::VT_PAUSED, static_cast<uint8_t>(paused), 0);
  }
  explicit DumpResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DumpResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DumpResponse>(end);
    fbb_.Required(o, DumpResponse::VT_ID);
    fbb_.Required(o, DumpResponse::VT_TYPE);
    fbb_.Required(o, DumpResponse::VT_RTPPARAMETERS);
    fbb_.Required(o, DumpResponse::VT_RTPMAPPING);
    fbb_.Required(o, DumpResponse::VT_TRACEEVENTTYPES);
    return o;
  }
};

inline ::flatbuffers::Offset<DumpResponse> CreateDumpResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    FBS::RtpParameters::MediaKind kind = FBS::RtpParameters::MediaKind::ALL,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<FBS::RtpParameters::RtpParameters> rtpParameters = 0,
    ::flatbuffers::Offset<FBS::RtpParameters::RtpMapping> rtpMapping = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBS::RtpStream::Dump>>> rtpStreams = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> traceEventTypes = 0,
    bool paused = false) {
  DumpResponseBuilder builder_(_fbb);
  builder_.add_traceEventTypes(traceEventTypes);
  builder_.add_rtpStreams(rtpStreams);
  builder_.add_rtpMapping(rtpMapping);
  builder_.add_rtpParameters(rtpParameters);
  builder_.add_type(type);
  builder_.add_id(id);
  builder_.add_paused(paused);
  builder_.add_kind(kind);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DumpResponse> CreateDumpResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    FBS::RtpParameters::MediaKind kind = FBS::RtpParameters::MediaKind::ALL,
    const char *type = nullptr,
    ::flatbuffers::Offset<FBS::RtpParameters::RtpParameters> rtpParameters = 0,
    ::flatbuffers::Offset<FBS::RtpParameters::RtpMapping> rtpMapping = 0,
    const std::vector<::flatbuffers::Offset<FBS::RtpStream::Dump>> *rtpStreams = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *traceEventTypes = nullptr,
    bool paused = false) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto rtpStreams__ = rtpStreams ? _fbb.CreateVector<::flatbuffers::Offset<FBS::RtpStream::Dump>>(*rtpStreams) : 0;
  auto traceEventTypes__ = traceEventTypes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*traceEventTypes) : 0;
  return FBS::Producer::CreateDumpResponse(
      _fbb,
      id__,
      kind,
      type__,
      rtpParameters,
      rtpMapping,
      rtpStreams__,
      traceEventTypes__,
      paused);
}

struct GetStatsResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GetStatsResponseBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return GetStatsResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<FBS::RtpStream::Stats>> *stats() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FBS::RtpStream::Stats>> *>(VT_STATS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STATS) &&
           verifier.VerifyVector(stats()) &&
           verifier.VerifyVectorOfTables(stats()) &&
           verifier.EndTable();
  }
};

struct GetStatsResponseBuilder {
  typedef GetStatsResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_stats(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBS::RtpStream::Stats>>> stats) {
    fbb_.AddOffset(GetStatsResponse::VT_STATS, stats);
  }
  explicit GetStatsResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GetStatsResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GetStatsResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GetStatsResponse> CreateGetStatsResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBS::RtpStream::Stats>>> stats = 0) {
  GetStatsResponseBuilder builder_(_fbb);
  builder_.add_stats(stats);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GetStatsResponse> CreateGetStatsResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<FBS::RtpStream::Stats>> *stats = nullptr) {
  auto stats__ = stats ? _fbb.CreateVector<::flatbuffers::Offset<FBS::RtpStream::Stats>>(*stats) : 0;
  return FBS::Producer::CreateGetStatsResponse(
      _fbb,
      stats__);
}

struct SendNotification FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SendNotificationBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return SendNotificationTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct SendNotificationBuilder {
  typedef SendNotification Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(SendNotification::VT_DATA, data);
  }
  explicit SendNotificationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SendNotification> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SendNotification>(end);
    fbb_.Required(o, SendNotification::VT_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<SendNotification> CreateSendNotification(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  SendNotificationBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SendNotification> CreateSendNotificationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return FBS::Producer::CreateSendNotification(
      _fbb,
      data__);
}

struct Score FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ScoreBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ScoreTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SSRC = 4,
    VT_RID = 6,
    VT_SCORE = 8
  };
  uint32_t ssrc() const {
    return GetField<uint32_t>(VT_SSRC, 0);
  }
  const ::flatbuffers::String *rid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RID);
  }
  uint8_t score() const {
    return GetField<uint8_t>(VT_SCORE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SSRC, 4) &&
           VerifyOffset(verifier, VT_RID) &&
           verifier.VerifyString(rid()) &&
           VerifyField<uint8_t>(verifier, VT_SCORE, 1) &&
           verifier.EndTable();
  }
};

struct ScoreBuilder {
  typedef Score Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ssrc(uint32_t ssrc) {
    fbb_.AddElement<uint32_t>(Score::VT_SSRC, ssrc, 0);
  }
  void add_rid(::flatbuffers::Offset<::flatbuffers::String> rid) {
    fbb_.AddOffset(Score::VT_RID, rid);
  }
  void add_score(uint8_t score) {
    fbb_.AddElement<uint8_t>(Score::VT_SCORE, score, 0);
  }
  explicit ScoreBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Score> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Score>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Score> CreateScore(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t ssrc = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rid = 0,
    uint8_t score = 0) {
  ScoreBuilder builder_(_fbb);
  builder_.add_rid(rid);
  builder_.add_ssrc(ssrc);
  builder_.add_score(score);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Score> CreateScoreDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t ssrc = 0,
    const char *rid = nullptr,
    uint8_t score = 0) {
  auto rid__ = rid ? _fbb.CreateString(rid) : 0;
  return FBS::Producer::CreateScore(
      _fbb,
      ssrc,
      rid__,
      score);
}

struct ScoreNotification FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ScoreNotificationBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ScoreNotificationTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SCORES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<FBS::Producer::Score>> *scores() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FBS::Producer::Score>> *>(VT_SCORES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SCORES) &&
           verifier.VerifyVector(scores()) &&
           verifier.VerifyVectorOfTables(scores()) &&
           verifier.EndTable();
  }
};

struct ScoreNotificationBuilder {
  typedef ScoreNotification Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_scores(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBS::Producer::Score>>> scores) {
    fbb_.AddOffset(ScoreNotification::VT_SCORES, scores);
  }
  explicit ScoreNotificationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ScoreNotification> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ScoreNotification>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ScoreNotification> CreateScoreNotification(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBS::Producer::Score>>> scores = 0) {
  ScoreNotificationBuilder builder_(_fbb);
  builder_.add_scores(scores);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ScoreNotification> CreateScoreNotificationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<FBS::Producer::Score>> *scores = nullptr) {
  auto scores__ = scores ? _fbb.CreateVector<::flatbuffers::Offset<FBS::Producer::Score>>(*scores) : 0;
  return FBS::Producer::CreateScoreNotification(
      _fbb,
      scores__);
}

struct VideoOrientationChangeNotification FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VideoOrientationChangeNotificationBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return VideoOrientationChangeNotificationTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CAMERA = 4,
    VT_FLIP = 6,
    VT_ROTATION = 8
  };
  bool camera() const {
    return GetField<uint8_t>(VT_CAMERA, 0) != 0;
  }
  bool flip() const {
    return GetField<uint8_t>(VT_FLIP, 0) != 0;
  }
  uint16_t rotation() const {
    return GetField<uint16_t>(VT_ROTATION, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CAMERA, 1) &&
           VerifyField<uint8_t>(verifier, VT_FLIP, 1) &&
           VerifyField<uint16_t>(verifier, VT_ROTATION, 2) &&
           verifier.EndTable();
  }
};

struct VideoOrientationChangeNotificationBuilder {
  typedef VideoOrientationChangeNotification Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_camera(bool camera) {
    fbb_.AddElement<uint8_t>(VideoOrientationChangeNotification::VT_CAMERA, static_cast<uint8_t>(camera), 0);
  }
  void add_flip(bool flip) {
    fbb_.AddElement<uint8_t>(VideoOrientationChangeNotification::VT_FLIP, static_cast<uint8_t>(flip), 0);
  }
  void add_rotation(uint16_t rotation) {
    fbb_.AddElement<uint16_t>(VideoOrientationChangeNotification::VT_ROTATION, rotation, 0);
  }
  explicit VideoOrientationChangeNotificationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<VideoOrientationChangeNotification> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<VideoOrientationChangeNotification>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<VideoOrientationChangeNotification> CreateVideoOrientationChangeNotification(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool camera = false,
    bool flip = false,
    uint16_t rotation = 0) {
  VideoOrientationChangeNotificationBuilder builder_(_fbb);
  builder_.add_rotation(rotation);
  builder_.add_flip(flip);
  builder_.add_camera(camera);
  return builder_.Finish();
}

struct KeyFrameTraceInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef KeyFrameTraceInfoBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return KeyFrameTraceInfoTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ISRTX = 4
  };
  bool isRtx() const {
    return GetField<uint8_t>(VT_ISRTX, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ISRTX, 1) &&
           verifier.EndTable();
  }
};

struct KeyFrameTraceInfoBuilder {
  typedef KeyFrameTraceInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_isRtx(bool isRtx) {
    fbb_.AddElement<uint8_t>(KeyFrameTraceInfo::VT_ISRTX, static_cast<uint8_t>(isRtx), 0);
  }
  explicit KeyFrameTraceInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<KeyFrameTraceInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<KeyFrameTraceInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<KeyFrameTraceInfo> CreateKeyFrameTraceInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool isRtx = false) {
  KeyFrameTraceInfoBuilder builder_(_fbb);
  builder_.add_isRtx(isRtx);
  return builder_.Finish();
}

struct FirTraceInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FirTraceInfoBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return FirTraceInfoTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SSRC = 4
  };
  uint32_t ssrc() const {
    return GetField<uint32_t>(VT_SSRC, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SSRC, 4) &&
           verifier.EndTable();
  }
};

struct FirTraceInfoBuilder {
  typedef FirTraceInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ssrc(uint32_t ssrc) {
    fbb_.AddElement<uint32_t>(FirTraceInfo::VT_SSRC, ssrc, 0);
  }
  explicit FirTraceInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FirTraceInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FirTraceInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FirTraceInfo> CreateFirTraceInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t ssrc = 0) {
  FirTraceInfoBuilder builder_(_fbb);
  builder_.add_ssrc(ssrc);
  return builder_.Finish();
}

struct PliTraceInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PliTraceInfoBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PliTraceInfoTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SSRC = 4
  };
  uint32_t ssrc() const {
    return GetField<uint32_t>(VT_SSRC, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SSRC, 4) &&
           verifier.EndTable();
  }
};

struct PliTraceInfoBuilder {
  typedef PliTraceInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ssrc(uint32_t ssrc) {
    fbb_.AddElement<uint32_t>(PliTraceInfo::VT_SSRC, ssrc, 0);
  }
  explicit PliTraceInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PliTraceInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PliTraceInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PliTraceInfo> CreatePliTraceInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t ssrc = 0) {
  PliTraceInfoBuilder builder_(_fbb);
  builder_.add_ssrc(ssrc);
  return builder_.Finish();
}

struct RtpTraceInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RtpTraceInfoBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return RtpTraceInfoTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ISRTX = 4
  };
  bool isRtx() const {
    return GetField<uint8_t>(VT_ISRTX, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ISRTX, 1) &&
           verifier.EndTable();
  }
};

struct RtpTraceInfoBuilder {
  typedef RtpTraceInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_isRtx(bool isRtx) {
    fbb_.AddElement<uint8_t>(RtpTraceInfo::VT_ISRTX, static_cast<uint8_t>(isRtx), 0);
  }
  explicit RtpTraceInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RtpTraceInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RtpTraceInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RtpTraceInfo> CreateRtpTraceInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool isRtx = false) {
  RtpTraceInfoBuilder builder_(_fbb);
  builder_.add_isRtx(isRtx);
  return builder_.Finish();
}

struct TraceNotification FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TraceNotificationBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TraceNotificationTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_TIMESTAMP = 6,
    VT_DIRECTION = 8,
    VT_INFO_TYPE = 10,
    VT_INFO = 12
  };
  FBS::Producer::TraceType type() const {
    return static_cast<FBS::Producer::TraceType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  FBS::Producer::TraceDirection direction() const {
    return static_cast<FBS::Producer::TraceDirection>(GetField<uint8_t>(VT_DIRECTION, 0));
  }
  FBS::Producer::TraceInfo info_type() const {
    return static_cast<FBS::Producer::TraceInfo>(GetField<uint8_t>(VT_INFO_TYPE, 0));
  }
  const void *info() const {
    return GetPointer<const void *>(VT_INFO);
  }
  template<typename T> const T *info_as() const;
  const FBS::Producer::KeyFrameTraceInfo *info_as_KeyFrameTraceInfo() const {
    return info_type() == FBS::Producer::TraceInfo::KeyFrameTraceInfo ? static_cast<const FBS::Producer::KeyFrameTraceInfo *>(info()) : nullptr;
  }
  const FBS::Producer::FirTraceInfo *info_as_FirTraceInfo() const {
    return info_type() == FBS::Producer::TraceInfo::FirTraceInfo ? static_cast<const FBS::Producer::FirTraceInfo *>(info()) : nullptr;
  }
  const FBS::Producer::PliTraceInfo *info_as_PliTraceInfo() const {
    return info_type() == FBS::Producer::TraceInfo::PliTraceInfo ? static_cast<const FBS::Producer::PliTraceInfo *>(info()) : nullptr;
  }
  const FBS::Producer::RtpTraceInfo *info_as_RtpTraceInfo() const {
    return info_type() == FBS::Producer::TraceInfo::RtpTraceInfo ? static_cast<const FBS::Producer::RtpTraceInfo *>(info()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           VerifyField<uint8_t>(verifier, VT_DIRECTION, 1) &&
           VerifyField<uint8_t>(verifier, VT_INFO_TYPE, 1) &&
           VerifyOffset(verifier, VT_INFO) &&
           VerifyTraceInfo(verifier, info(), info_type()) &&
           verifier.EndTable();
  }
};

template<> inline const FBS::Producer::KeyFrameTraceInfo *TraceNotification::info_as<FBS::Producer::KeyFrameTraceInfo>() const {
  return info_as_KeyFrameTraceInfo();
}

template<> inline const FBS::Producer::FirTraceInfo *TraceNotification::info_as<FBS::Producer::FirTraceInfo>() const {
  return info_as_FirTraceInfo();
}

template<> inline const FBS::Producer::PliTraceInfo *TraceNotification::info_as<FBS::Producer::PliTraceInfo>() const {
  return info_as_PliTraceInfo();
}

template<> inline const FBS::Producer::RtpTraceInfo *TraceNotification::info_as<FBS::Producer::RtpTraceInfo>() const {
  return info_as_RtpTraceInfo();
}

struct TraceNotificationBuilder {
  typedef TraceNotification Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(FBS::Producer::TraceType type) {
    fbb_.AddElement<uint8_t>(TraceNotification::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(TraceNotification::VT_TIMESTAMP, timestamp, 0);
  }
  void add_direction(FBS::Producer::TraceDirection direction) {
    fbb_.AddElement<uint8_t>(TraceNotification::VT_DIRECTION, static_cast<uint8_t>(direction), 0);
  }
  void add_info_type(FBS::Producer::TraceInfo info_type) {
    fbb_.AddElement<uint8_t>(TraceNotification::VT_INFO_TYPE, static_cast<uint8_t>(info_type), 0);
  }
  void add_info(::flatbuffers::Offset<void> info) {
    fbb_.AddOffset(TraceNotification::VT_INFO, info);
  }
  explicit TraceNotificationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TraceNotification> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TraceNotification>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TraceNotification> CreateTraceNotification(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    FBS::Producer::TraceType type = FBS::Producer::TraceType::KEYFRAME,
    uint64_t timestamp = 0,
    FBS::Producer::TraceDirection direction = FBS::Producer::TraceDirection::DIRECTION_IN,
    FBS::Producer::TraceInfo info_type = FBS::Producer::TraceInfo::NONE,
    ::flatbuffers::Offset<void> info = 0) {
  TraceNotificationBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_info(info);
  builder_.add_info_type(info_type);
  builder_.add_direction(direction);
  builder_.add_type(type);
  return builder_.Finish();
}

inline bool VerifyTraceInfo(::flatbuffers::Verifier &verifier, const void *obj, TraceInfo type) {
  switch (type) {
    case TraceInfo::NONE: {
      return true;
    }
    case TraceInfo::KeyFrameTraceInfo: {
      auto ptr = reinterpret_cast<const FBS::Producer::KeyFrameTraceInfo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case TraceInfo::FirTraceInfo: {
      auto ptr = reinterpret_cast<const FBS::Producer::FirTraceInfo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case TraceInfo::PliTraceInfo: {
      auto ptr = reinterpret_cast<const FBS::Producer::PliTraceInfo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case TraceInfo::RtpTraceInfo: {
      auto ptr = reinterpret_cast<const FBS::Producer::RtpTraceInfo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyTraceInfoVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<TraceInfo> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyTraceInfo(
        verifier,  values->Get(i), types->GetEnum<TraceInfo>(i))) {
      return false;
    }
  }
  return true;
}

inline const ::flatbuffers::TypeTable *TraceTypeTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Producer::TraceTypeTypeTable
  };
  static const char * const names[] = {
    "KEYFRAME",
    "FIR",
    "NACK",
    "PLI",
    "RTP"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *TraceDirectionTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Producer::TraceDirectionTypeTable
  };
  static const char * const names[] = {
    "DIRECTION_IN",
    "DIRECTION_OUT"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *TraceInfoTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 },
    { ::flatbuffers::ET_SEQUENCE, 0, 3 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Producer::KeyFrameTraceInfoTypeTable,
    FBS::Producer::FirTraceInfoTypeTable,
    FBS::Producer::PliTraceInfoTypeTable,
    FBS::Producer::RtpTraceInfoTypeTable
  };
  static const char * const names[] = {
    "NONE",
    "KeyFrameTraceInfo",
    "FirTraceInfo",
    "PliTraceInfo",
    "RtpTraceInfo"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_UNION, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *EnableTraceEventRequestTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 1, -1 }
  };
  static const char * const names[] = {
    "events"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *DumpResponseTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 },
    { ::flatbuffers::ET_SEQUENCE, 1, 3 },
    { ::flatbuffers::ET_STRING, 1, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::RtpParameters::MediaKindTypeTable,
    FBS::RtpParameters::RtpParametersTypeTable,
    FBS::RtpParameters::RtpMappingTypeTable,
    FBS::RtpStream::DumpTypeTable
  };
  static const char * const names[] = {
    "id",
    "kind",
    "type",
    "rtpParameters",
    "rtpMapping",
    "rtpStreams",
    "traceEventTypes",
    "paused"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 8, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *GetStatsResponseTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::RtpStream::StatsTypeTable
  };
  static const char * const names[] = {
    "stats"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *SendNotificationTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const char * const names[] = {
    "data"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ScoreTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UINT, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, -1 }
  };
  static const char * const names[] = {
    "ssrc",
    "rid",
    "score"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ScoreNotificationTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Producer::ScoreTypeTable
  };
  static const char * const names[] = {
    "scores"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *VideoOrientationChangeNotificationTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_USHORT, 0, -1 }
  };
  static const char * const names[] = {
    "camera",
    "flip",
    "rotation"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *KeyFrameTraceInfoTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_BOOL, 0, -1 }
  };
  static const char * const names[] = {
    "isRtx"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *FirTraceInfoTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UINT, 0, -1 }
  };
  static const char * const names[] = {
    "ssrc"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *PliTraceInfoTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UINT, 0, -1 }
  };
  static const char * const names[] = {
    "ssrc"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *RtpTraceInfoTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_BOOL, 0, -1 }
  };
  static const char * const names[] = {
    "isRtx"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *TraceNotificationTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_ULONG, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, 1 },
    { ::flatbuffers::ET_UTYPE, 0, 2 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Producer::TraceTypeTypeTable,
    FBS::Producer::TraceDirectionTypeTable,
    FBS::Producer::TraceInfoTypeTable
  };
  static const char * const names[] = {
    "type",
    "timestamp",
    "direction",
    "info_type",
    "info"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace Producer
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_PRODUCER_FBS_PRODUCER_H_
