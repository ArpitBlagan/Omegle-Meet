// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCTPASSOCIATION_FBS_SCTPASSOCIATION_H_
#define FLATBUFFERS_GENERATED_SCTPASSOCIATION_FBS_SCTPASSOCIATION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

namespace FBS {
namespace SctpAssociation {

enum class SctpState : uint8_t {
  NEW = 0,
  CONNECTING = 1,
  CONNECTED = 2,
  FAILED = 3,
  CLOSED = 4,
  MIN = NEW,
  MAX = CLOSED
};

inline const SctpState (&EnumValuesSctpState())[5] {
  static const SctpState values[] = {
    SctpState::NEW,
    SctpState::CONNECTING,
    SctpState::CONNECTED,
    SctpState::FAILED,
    SctpState::CLOSED
  };
  return values;
}

inline const char * const *EnumNamesSctpState() {
  static const char * const names[6] = {
    "NEW",
    "CONNECTING",
    "CONNECTED",
    "FAILED",
    "CLOSED",
    nullptr
  };
  return names;
}

inline const char *EnumNameSctpState(SctpState e) {
  if (::flatbuffers::IsOutRange(e, SctpState::NEW, SctpState::CLOSED)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSctpState()[index];
}

inline const ::flatbuffers::TypeTable *SctpStateTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::SctpAssociation::SctpStateTypeTable
  };
  static const char * const names[] = {
    "NEW",
    "CONNECTING",
    "CONNECTED",
    "FAILED",
    "CLOSED"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace SctpAssociation
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_SCTPASSOCIATION_FBS_SCTPASSOCIATION_H_
