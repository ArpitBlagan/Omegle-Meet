// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_FBS_MESSAGE_H_
#define FLATBUFFERS_GENERATED_MESSAGE_FBS_MESSAGE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

#include "log_generated.h"
#include "notification_generated.h"
#include "request_generated.h"
#include "response_generated.h"

namespace FBS {
namespace Message {

struct Message;
struct MessageBuilder;

inline const ::flatbuffers::TypeTable *MessageTypeTable();

enum class Type : uint8_t {
  REQUEST = 0,
  RESPONSE = 1,
  NOTIFICATION = 2,
  LOG = 3,
  MIN = REQUEST,
  MAX = LOG
};

inline const Type (&EnumValuesType())[4] {
  static const Type values[] = {
    Type::REQUEST,
    Type::RESPONSE,
    Type::NOTIFICATION,
    Type::LOG
  };
  return values;
}

inline const char * const *EnumNamesType() {
  static const char * const names[5] = {
    "REQUEST",
    "RESPONSE",
    "NOTIFICATION",
    "LOG",
    nullptr
  };
  return names;
}

inline const char *EnumNameType(Type e) {
  if (::flatbuffers::IsOutRange(e, Type::REQUEST, Type::LOG)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesType()[index];
}

enum class Body : uint8_t {
  NONE = 0,
  FBS_Request_Request = 1,
  FBS_Response_Response = 2,
  FBS_Notification_Notification = 3,
  FBS_Log_Log = 4,
  MIN = NONE,
  MAX = FBS_Log_Log
};

inline const Body (&EnumValuesBody())[5] {
  static const Body values[] = {
    Body::NONE,
    Body::FBS_Request_Request,
    Body::FBS_Response_Response,
    Body::FBS_Notification_Notification,
    Body::FBS_Log_Log
  };
  return values;
}

inline const char * const *EnumNamesBody() {
  static const char * const names[6] = {
    "NONE",
    "FBS_Request_Request",
    "FBS_Response_Response",
    "FBS_Notification_Notification",
    "FBS_Log_Log",
    nullptr
  };
  return names;
}

inline const char *EnumNameBody(Body e) {
  if (::flatbuffers::IsOutRange(e, Body::NONE, Body::FBS_Log_Log)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBody()[index];
}

template<typename T> struct BodyTraits {
  static const Body enum_value = Body::NONE;
};

template<> struct BodyTraits<FBS::Request::Request> {
  static const Body enum_value = Body::FBS_Request_Request;
};

template<> struct BodyTraits<FBS::Response::Response> {
  static const Body enum_value = Body::FBS_Response_Response;
};

template<> struct BodyTraits<FBS::Notification::Notification> {
  static const Body enum_value = Body::FBS_Notification_Notification;
};

template<> struct BodyTraits<FBS::Log::Log> {
  static const Body enum_value = Body::FBS_Log_Log;
};

bool VerifyBody(::flatbuffers::Verifier &verifier, const void *obj, Body type);
bool VerifyBodyVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Body> *types);

struct Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return MessageTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_DATA_TYPE = 6,
    VT_DATA = 8
  };
  FBS::Message::Type type() const {
    return static_cast<FBS::Message::Type>(GetField<uint8_t>(VT_TYPE, 0));
  }
  FBS::Message::Body data_type() const {
    return static_cast<FBS::Message::Body>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const FBS::Request::Request *data_as_FBS_Request_Request() const {
    return data_type() == FBS::Message::Body::FBS_Request_Request ? static_cast<const FBS::Request::Request *>(data()) : nullptr;
  }
  const FBS::Response::Response *data_as_FBS_Response_Response() const {
    return data_type() == FBS::Message::Body::FBS_Response_Response ? static_cast<const FBS::Response::Response *>(data()) : nullptr;
  }
  const FBS::Notification::Notification *data_as_FBS_Notification_Notification() const {
    return data_type() == FBS::Message::Body::FBS_Notification_Notification ? static_cast<const FBS::Notification::Notification *>(data()) : nullptr;
  }
  const FBS::Log::Log *data_as_FBS_Log_Log() const {
    return data_type() == FBS::Message::Body::FBS_Log_Log ? static_cast<const FBS::Log::Log *>(data()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_DATA) &&
           VerifyBody(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const FBS::Request::Request *Message::data_as<FBS::Request::Request>() const {
  return data_as_FBS_Request_Request();
}

template<> inline const FBS::Response::Response *Message::data_as<FBS::Response::Response>() const {
  return data_as_FBS_Response_Response();
}

template<> inline const FBS::Notification::Notification *Message::data_as<FBS::Notification::Notification>() const {
  return data_as_FBS_Notification_Notification();
}

template<> inline const FBS::Log::Log *Message::data_as<FBS::Log::Log>() const {
  return data_as_FBS_Log_Log();
}

struct MessageBuilder {
  typedef Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(FBS::Message::Type type) {
    fbb_.AddElement<uint8_t>(Message::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_data_type(FBS::Message::Body data_type) {
    fbb_.AddElement<uint8_t>(Message::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(::flatbuffers::Offset<void> data) {
    fbb_.AddOffset(Message::VT_DATA, data);
  }
  explicit MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Message>(end);
    fbb_.Required(o, Message::VT_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<Message> CreateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    FBS::Message::Type type = FBS::Message::Type::REQUEST,
    FBS::Message::Body data_type = FBS::Message::Body::NONE,
    ::flatbuffers::Offset<void> data = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  builder_.add_type(type);
  return builder_.Finish();
}

inline bool VerifyBody(::flatbuffers::Verifier &verifier, const void *obj, Body type) {
  switch (type) {
    case Body::NONE: {
      return true;
    }
    case Body::FBS_Request_Request: {
      auto ptr = reinterpret_cast<const FBS::Request::Request *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Response_Response: {
      auto ptr = reinterpret_cast<const FBS::Response::Response *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Notification_Notification: {
      auto ptr = reinterpret_cast<const FBS::Notification::Notification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Log_Log: {
      auto ptr = reinterpret_cast<const FBS::Log::Log *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyBodyVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Body> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyBody(
        verifier,  values->Get(i), types->GetEnum<Body>(i))) {
      return false;
    }
  }
  return true;
}

inline const ::flatbuffers::TypeTable *TypeTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Message::TypeTypeTable
  };
  static const char * const names[] = {
    "REQUEST",
    "RESPONSE",
    "NOTIFICATION",
    "LOG"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *BodyTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 },
    { ::flatbuffers::ET_SEQUENCE, 0, 3 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Request::RequestTypeTable,
    FBS::Response::ResponseTypeTable,
    FBS::Notification::NotificationTypeTable,
    FBS::Log::LogTypeTable
  };
  static const char * const names[] = {
    "NONE",
    "FBS_Request_Request",
    "FBS_Response_Response",
    "FBS_Notification_Notification",
    "FBS_Log_Log"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_UNION, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *MessageTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UTYPE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Message::TypeTypeTable,
    FBS::Message::BodyTypeTable
  };
  static const char * const names[] = {
    "type",
    "data_type",
    "data"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const FBS::Message::Message *GetMessage(const void *buf) {
  return ::flatbuffers::GetRoot<FBS::Message::Message>(buf);
}

inline const FBS::Message::Message *GetSizePrefixedMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FBS::Message::Message>(buf);
}

inline bool VerifyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FBS::Message::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FBS::Message::Message>(nullptr);
}

inline void FinishMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FBS::Message::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FBS::Message::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Message
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_MESSAGE_FBS_MESSAGE_H_
