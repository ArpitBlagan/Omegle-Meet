// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ACTIVESPEAKEROBSERVER_FBS_ACTIVESPEAKEROBSERVER_H_
#define FLATBUFFERS_GENERATED_ACTIVESPEAKEROBSERVER_FBS_ACTIVESPEAKEROBSERVER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

namespace FBS {
namespace ActiveSpeakerObserver {

struct ActiveSpeakerObserverOptions;
struct ActiveSpeakerObserverOptionsBuilder;

struct DominantSpeakerNotification;
struct DominantSpeakerNotificationBuilder;

inline const ::flatbuffers::TypeTable *ActiveSpeakerObserverOptionsTypeTable();

inline const ::flatbuffers::TypeTable *DominantSpeakerNotificationTypeTable();

struct ActiveSpeakerObserverOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ActiveSpeakerObserverOptionsBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ActiveSpeakerObserverOptionsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INTERVAL = 4
  };
  uint16_t interval() const {
    return GetField<uint16_t>(VT_INTERVAL, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_INTERVAL, 2) &&
           verifier.EndTable();
  }
};

struct ActiveSpeakerObserverOptionsBuilder {
  typedef ActiveSpeakerObserverOptions Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_interval(uint16_t interval) {
    fbb_.AddElement<uint16_t>(ActiveSpeakerObserverOptions::VT_INTERVAL, interval, 0);
  }
  explicit ActiveSpeakerObserverOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ActiveSpeakerObserverOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ActiveSpeakerObserverOptions>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ActiveSpeakerObserverOptions> CreateActiveSpeakerObserverOptions(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t interval = 0) {
  ActiveSpeakerObserverOptionsBuilder builder_(_fbb);
  builder_.add_interval(interval);
  return builder_.Finish();
}

struct DominantSpeakerNotification FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DominantSpeakerNotificationBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DominantSpeakerNotificationTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRODUCERID = 4
  };
  const ::flatbuffers::String *producerId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRODUCERID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_PRODUCERID) &&
           verifier.VerifyString(producerId()) &&
           verifier.EndTable();
  }
};

struct DominantSpeakerNotificationBuilder {
  typedef DominantSpeakerNotification Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_producerId(::flatbuffers::Offset<::flatbuffers::String> producerId) {
    fbb_.AddOffset(DominantSpeakerNotification::VT_PRODUCERID, producerId);
  }
  explicit DominantSpeakerNotificationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DominantSpeakerNotification> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DominantSpeakerNotification>(end);
    fbb_.Required(o, DominantSpeakerNotification::VT_PRODUCERID);
    return o;
  }
};

inline ::flatbuffers::Offset<DominantSpeakerNotification> CreateDominantSpeakerNotification(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> producerId = 0) {
  DominantSpeakerNotificationBuilder builder_(_fbb);
  builder_.add_producerId(producerId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DominantSpeakerNotification> CreateDominantSpeakerNotificationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *producerId = nullptr) {
  auto producerId__ = producerId ? _fbb.CreateString(producerId) : 0;
  return FBS::ActiveSpeakerObserver::CreateDominantSpeakerNotification(
      _fbb,
      producerId__);
}

inline const ::flatbuffers::TypeTable *ActiveSpeakerObserverOptionsTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_USHORT, 0, -1 }
  };
  static const char * const names[] = {
    "interval"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *DominantSpeakerNotificationTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "producerId"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace ActiveSpeakerObserver
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_ACTIVESPEAKEROBSERVER_FBS_ACTIVESPEAKEROBSERVER_H_
