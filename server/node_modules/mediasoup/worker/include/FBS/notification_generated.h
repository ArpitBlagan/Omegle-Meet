// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NOTIFICATION_FBS_NOTIFICATION_H_
#define FLATBUFFERS_GENERATED_NOTIFICATION_FBS_NOTIFICATION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

#include "activeSpeakerObserver_generated.h"
#include "audioLevelObserver_generated.h"
#include "dataConsumer_generated.h"
#include "dataProducer_generated.h"
#include "directTransport_generated.h"
#include "plainTransport_generated.h"
#include "producer_generated.h"
#include "transport_generated.h"
#include "webRtcTransport_generated.h"

namespace FBS {
namespace Notification {

struct Notification;
struct NotificationBuilder;

inline const ::flatbuffers::TypeTable *NotificationTypeTable();

enum class Event : uint8_t {
  TRANSPORT_SEND_RTCP = 0,
  PRODUCER_SEND = 1,
  DATAPRODUCER_SEND = 2,
  WORKER_RUNNING = 3,
  TRANSPORT_SCTP_STATE_CHANGE = 4,
  TRANSPORT_TRACE = 5,
  WEBRTCTRANSPORT_ICE_SELECTED_TUPLE_CHANGE = 6,
  WEBRTCTRANSPORT_ICE_STATE_CHANGE = 7,
  WEBRTCTRANSPORT_DTLS_STATE_CHANGE = 8,
  PLAINTRANSPORT_TUPLE = 9,
  PLAINTRANSPORT_RTCP_TUPLE = 10,
  DIRECTTRANSPORT_RTCP = 11,
  PRODUCER_SCORE = 12,
  PRODUCER_TRACE = 13,
  PRODUCER_VIDEO_ORIENTATION_CHANGE = 14,
  CONSUMER_PRODUCER_PAUSE = 15,
  CONSUMER_PRODUCER_RESUME = 16,
  CONSUMER_PRODUCER_CLOSE = 17,
  CONSUMER_LAYERS_CHANGE = 18,
  CONSUMER_RTP = 19,
  CONSUMER_SCORE = 20,
  CONSUMER_TRACE = 21,
  DATACONSUMER_BUFFERED_AMOUNT_LOW = 22,
  DATACONSUMER_SCTP_SENDBUFFER_FULL = 23,
  DATACONSUMER_DATAPRODUCER_PAUSE = 24,
  DATACONSUMER_DATAPRODUCER_RESUME = 25,
  DATACONSUMER_DATAPRODUCER_CLOSE = 26,
  DATACONSUMER_MESSAGE = 27,
  ACTIVESPEAKEROBSERVER_DOMINANT_SPEAKER = 28,
  AUDIOLEVELOBSERVER_SILENCE = 29,
  AUDIOLEVELOBSERVER_VOLUMES = 30,
  MIN = TRANSPORT_SEND_RTCP,
  MAX = AUDIOLEVELOBSERVER_VOLUMES
};

inline const Event (&EnumValuesEvent())[31] {
  static const Event values[] = {
    Event::TRANSPORT_SEND_RTCP,
    Event::PRODUCER_SEND,
    Event::DATAPRODUCER_SEND,
    Event::WORKER_RUNNING,
    Event::TRANSPORT_SCTP_STATE_CHANGE,
    Event::TRANSPORT_TRACE,
    Event::WEBRTCTRANSPORT_ICE_SELECTED_TUPLE_CHANGE,
    Event::WEBRTCTRANSPORT_ICE_STATE_CHANGE,
    Event::WEBRTCTRANSPORT_DTLS_STATE_CHANGE,
    Event::PLAINTRANSPORT_TUPLE,
    Event::PLAINTRANSPORT_RTCP_TUPLE,
    Event::DIRECTTRANSPORT_RTCP,
    Event::PRODUCER_SCORE,
    Event::PRODUCER_TRACE,
    Event::PRODUCER_VIDEO_ORIENTATION_CHANGE,
    Event::CONSUMER_PRODUCER_PAUSE,
    Event::CONSUMER_PRODUCER_RESUME,
    Event::CONSUMER_PRODUCER_CLOSE,
    Event::CONSUMER_LAYERS_CHANGE,
    Event::CONSUMER_RTP,
    Event::CONSUMER_SCORE,
    Event::CONSUMER_TRACE,
    Event::DATACONSUMER_BUFFERED_AMOUNT_LOW,
    Event::DATACONSUMER_SCTP_SENDBUFFER_FULL,
    Event::DATACONSUMER_DATAPRODUCER_PAUSE,
    Event::DATACONSUMER_DATAPRODUCER_RESUME,
    Event::DATACONSUMER_DATAPRODUCER_CLOSE,
    Event::DATACONSUMER_MESSAGE,
    Event::ACTIVESPEAKEROBSERVER_DOMINANT_SPEAKER,
    Event::AUDIOLEVELOBSERVER_SILENCE,
    Event::AUDIOLEVELOBSERVER_VOLUMES
  };
  return values;
}

inline const char * const *EnumNamesEvent() {
  static const char * const names[32] = {
    "TRANSPORT_SEND_RTCP",
    "PRODUCER_SEND",
    "DATAPRODUCER_SEND",
    "WORKER_RUNNING",
    "TRANSPORT_SCTP_STATE_CHANGE",
    "TRANSPORT_TRACE",
    "WEBRTCTRANSPORT_ICE_SELECTED_TUPLE_CHANGE",
    "WEBRTCTRANSPORT_ICE_STATE_CHANGE",
    "WEBRTCTRANSPORT_DTLS_STATE_CHANGE",
    "PLAINTRANSPORT_TUPLE",
    "PLAINTRANSPORT_RTCP_TUPLE",
    "DIRECTTRANSPORT_RTCP",
    "PRODUCER_SCORE",
    "PRODUCER_TRACE",
    "PRODUCER_VIDEO_ORIENTATION_CHANGE",
    "CONSUMER_PRODUCER_PAUSE",
    "CONSUMER_PRODUCER_RESUME",
    "CONSUMER_PRODUCER_CLOSE",
    "CONSUMER_LAYERS_CHANGE",
    "CONSUMER_RTP",
    "CONSUMER_SCORE",
    "CONSUMER_TRACE",
    "DATACONSUMER_BUFFERED_AMOUNT_LOW",
    "DATACONSUMER_SCTP_SENDBUFFER_FULL",
    "DATACONSUMER_DATAPRODUCER_PAUSE",
    "DATACONSUMER_DATAPRODUCER_RESUME",
    "DATACONSUMER_DATAPRODUCER_CLOSE",
    "DATACONSUMER_MESSAGE",
    "ACTIVESPEAKEROBSERVER_DOMINANT_SPEAKER",
    "AUDIOLEVELOBSERVER_SILENCE",
    "AUDIOLEVELOBSERVER_VOLUMES",
    nullptr
  };
  return names;
}

inline const char *EnumNameEvent(Event e) {
  if (::flatbuffers::IsOutRange(e, Event::TRANSPORT_SEND_RTCP, Event::AUDIOLEVELOBSERVER_VOLUMES)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEvent()[index];
}

enum class Body : uint8_t {
  NONE = 0,
  FBS_Transport_SendRtcpNotification = 1,
  FBS_Transport_SctpStateChangeNotification = 2,
  FBS_Producer_SendNotification = 3,
  FBS_DataProducer_SendNotification = 4,
  FBS_Transport_TraceNotification = 5,
  FBS_WebRtcTransport_IceSelectedTupleChangeNotification = 6,
  FBS_WebRtcTransport_IceStateChangeNotification = 7,
  FBS_WebRtcTransport_DtlsStateChangeNotification = 8,
  FBS_PlainTransport_TupleNotification = 9,
  FBS_PlainTransport_RtcpTupleNotification = 10,
  FBS_DirectTransport_RtcpNotification = 11,
  FBS_Producer_ScoreNotification = 12,
  FBS_Producer_TraceNotification = 13,
  FBS_Producer_VideoOrientationChangeNotification = 14,
  FBS_Consumer_LayersChangeNotification = 15,
  FBS_Consumer_RtpNotification = 16,
  FBS_Consumer_ScoreNotification = 17,
  FBS_Consumer_TraceNotification = 18,
  FBS_DataConsumer_MessageNotification = 19,
  FBS_DataConsumer_BufferedAmountLowNotification = 20,
  FBS_ActiveSpeakerObserver_DominantSpeakerNotification = 21,
  FBS_AudioLevelObserver_VolumesNotification = 22,
  MIN = NONE,
  MAX = FBS_AudioLevelObserver_VolumesNotification
};

inline const Body (&EnumValuesBody())[23] {
  static const Body values[] = {
    Body::NONE,
    Body::FBS_Transport_SendRtcpNotification,
    Body::FBS_Transport_SctpStateChangeNotification,
    Body::FBS_Producer_SendNotification,
    Body::FBS_DataProducer_SendNotification,
    Body::FBS_Transport_TraceNotification,
    Body::FBS_WebRtcTransport_IceSelectedTupleChangeNotification,
    Body::FBS_WebRtcTransport_IceStateChangeNotification,
    Body::FBS_WebRtcTransport_DtlsStateChangeNotification,
    Body::FBS_PlainTransport_TupleNotification,
    Body::FBS_PlainTransport_RtcpTupleNotification,
    Body::FBS_DirectTransport_RtcpNotification,
    Body::FBS_Producer_ScoreNotification,
    Body::FBS_Producer_TraceNotification,
    Body::FBS_Producer_VideoOrientationChangeNotification,
    Body::FBS_Consumer_LayersChangeNotification,
    Body::FBS_Consumer_RtpNotification,
    Body::FBS_Consumer_ScoreNotification,
    Body::FBS_Consumer_TraceNotification,
    Body::FBS_DataConsumer_MessageNotification,
    Body::FBS_DataConsumer_BufferedAmountLowNotification,
    Body::FBS_ActiveSpeakerObserver_DominantSpeakerNotification,
    Body::FBS_AudioLevelObserver_VolumesNotification
  };
  return values;
}

inline const char * const *EnumNamesBody() {
  static const char * const names[24] = {
    "NONE",
    "FBS_Transport_SendRtcpNotification",
    "FBS_Transport_SctpStateChangeNotification",
    "FBS_Producer_SendNotification",
    "FBS_DataProducer_SendNotification",
    "FBS_Transport_TraceNotification",
    "FBS_WebRtcTransport_IceSelectedTupleChangeNotification",
    "FBS_WebRtcTransport_IceStateChangeNotification",
    "FBS_WebRtcTransport_DtlsStateChangeNotification",
    "FBS_PlainTransport_TupleNotification",
    "FBS_PlainTransport_RtcpTupleNotification",
    "FBS_DirectTransport_RtcpNotification",
    "FBS_Producer_ScoreNotification",
    "FBS_Producer_TraceNotification",
    "FBS_Producer_VideoOrientationChangeNotification",
    "FBS_Consumer_LayersChangeNotification",
    "FBS_Consumer_RtpNotification",
    "FBS_Consumer_ScoreNotification",
    "FBS_Consumer_TraceNotification",
    "FBS_DataConsumer_MessageNotification",
    "FBS_DataConsumer_BufferedAmountLowNotification",
    "FBS_ActiveSpeakerObserver_DominantSpeakerNotification",
    "FBS_AudioLevelObserver_VolumesNotification",
    nullptr
  };
  return names;
}

inline const char *EnumNameBody(Body e) {
  if (::flatbuffers::IsOutRange(e, Body::NONE, Body::FBS_AudioLevelObserver_VolumesNotification)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBody()[index];
}

template<typename T> struct BodyTraits {
  static const Body enum_value = Body::NONE;
};

template<> struct BodyTraits<FBS::Transport::SendRtcpNotification> {
  static const Body enum_value = Body::FBS_Transport_SendRtcpNotification;
};

template<> struct BodyTraits<FBS::Transport::SctpStateChangeNotification> {
  static const Body enum_value = Body::FBS_Transport_SctpStateChangeNotification;
};

template<> struct BodyTraits<FBS::Producer::SendNotification> {
  static const Body enum_value = Body::FBS_Producer_SendNotification;
};

template<> struct BodyTraits<FBS::DataProducer::SendNotification> {
  static const Body enum_value = Body::FBS_DataProducer_SendNotification;
};

template<> struct BodyTraits<FBS::Transport::TraceNotification> {
  static const Body enum_value = Body::FBS_Transport_TraceNotification;
};

template<> struct BodyTraits<FBS::WebRtcTransport::IceSelectedTupleChangeNotification> {
  static const Body enum_value = Body::FBS_WebRtcTransport_IceSelectedTupleChangeNotification;
};

template<> struct BodyTraits<FBS::WebRtcTransport::IceStateChangeNotification> {
  static const Body enum_value = Body::FBS_WebRtcTransport_IceStateChangeNotification;
};

template<> struct BodyTraits<FBS::WebRtcTransport::DtlsStateChangeNotification> {
  static const Body enum_value = Body::FBS_WebRtcTransport_DtlsStateChangeNotification;
};

template<> struct BodyTraits<FBS::PlainTransport::TupleNotification> {
  static const Body enum_value = Body::FBS_PlainTransport_TupleNotification;
};

template<> struct BodyTraits<FBS::PlainTransport::RtcpTupleNotification> {
  static const Body enum_value = Body::FBS_PlainTransport_RtcpTupleNotification;
};

template<> struct BodyTraits<FBS::DirectTransport::RtcpNotification> {
  static const Body enum_value = Body::FBS_DirectTransport_RtcpNotification;
};

template<> struct BodyTraits<FBS::Producer::ScoreNotification> {
  static const Body enum_value = Body::FBS_Producer_ScoreNotification;
};

template<> struct BodyTraits<FBS::Producer::TraceNotification> {
  static const Body enum_value = Body::FBS_Producer_TraceNotification;
};

template<> struct BodyTraits<FBS::Producer::VideoOrientationChangeNotification> {
  static const Body enum_value = Body::FBS_Producer_VideoOrientationChangeNotification;
};

template<> struct BodyTraits<FBS::Consumer::LayersChangeNotification> {
  static const Body enum_value = Body::FBS_Consumer_LayersChangeNotification;
};

template<> struct BodyTraits<FBS::Consumer::RtpNotification> {
  static const Body enum_value = Body::FBS_Consumer_RtpNotification;
};

template<> struct BodyTraits<FBS::Consumer::ScoreNotification> {
  static const Body enum_value = Body::FBS_Consumer_ScoreNotification;
};

template<> struct BodyTraits<FBS::Consumer::TraceNotification> {
  static const Body enum_value = Body::FBS_Consumer_TraceNotification;
};

template<> struct BodyTraits<FBS::DataConsumer::MessageNotification> {
  static const Body enum_value = Body::FBS_DataConsumer_MessageNotification;
};

template<> struct BodyTraits<FBS::DataConsumer::BufferedAmountLowNotification> {
  static const Body enum_value = Body::FBS_DataConsumer_BufferedAmountLowNotification;
};

template<> struct BodyTraits<FBS::ActiveSpeakerObserver::DominantSpeakerNotification> {
  static const Body enum_value = Body::FBS_ActiveSpeakerObserver_DominantSpeakerNotification;
};

template<> struct BodyTraits<FBS::AudioLevelObserver::VolumesNotification> {
  static const Body enum_value = Body::FBS_AudioLevelObserver_VolumesNotification;
};

bool VerifyBody(::flatbuffers::Verifier &verifier, const void *obj, Body type);
bool VerifyBodyVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Body> *types);

struct Notification FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NotificationBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return NotificationTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HANDLERID = 4,
    VT_EVENT = 6,
    VT_BODY_TYPE = 8,
    VT_BODY = 10
  };
  const ::flatbuffers::String *handlerId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HANDLERID);
  }
  FBS::Notification::Event event() const {
    return static_cast<FBS::Notification::Event>(GetField<uint8_t>(VT_EVENT, 0));
  }
  FBS::Notification::Body body_type() const {
    return static_cast<FBS::Notification::Body>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const FBS::Transport::SendRtcpNotification *body_as_FBS_Transport_SendRtcpNotification() const {
    return body_type() == FBS::Notification::Body::FBS_Transport_SendRtcpNotification ? static_cast<const FBS::Transport::SendRtcpNotification *>(body()) : nullptr;
  }
  const FBS::Transport::SctpStateChangeNotification *body_as_FBS_Transport_SctpStateChangeNotification() const {
    return body_type() == FBS::Notification::Body::FBS_Transport_SctpStateChangeNotification ? static_cast<const FBS::Transport::SctpStateChangeNotification *>(body()) : nullptr;
  }
  const FBS::Producer::SendNotification *body_as_FBS_Producer_SendNotification() const {
    return body_type() == FBS::Notification::Body::FBS_Producer_SendNotification ? static_cast<const FBS::Producer::SendNotification *>(body()) : nullptr;
  }
  const FBS::DataProducer::SendNotification *body_as_FBS_DataProducer_SendNotification() const {
    return body_type() == FBS::Notification::Body::FBS_DataProducer_SendNotification ? static_cast<const FBS::DataProducer::SendNotification *>(body()) : nullptr;
  }
  const FBS::Transport::TraceNotification *body_as_FBS_Transport_TraceNotification() const {
    return body_type() == FBS::Notification::Body::FBS_Transport_TraceNotification ? static_cast<const FBS::Transport::TraceNotification *>(body()) : nullptr;
  }
  const FBS::WebRtcTransport::IceSelectedTupleChangeNotification *body_as_FBS_WebRtcTransport_IceSelectedTupleChangeNotification() const {
    return body_type() == FBS::Notification::Body::FBS_WebRtcTransport_IceSelectedTupleChangeNotification ? static_cast<const FBS::WebRtcTransport::IceSelectedTupleChangeNotification *>(body()) : nullptr;
  }
  const FBS::WebRtcTransport::IceStateChangeNotification *body_as_FBS_WebRtcTransport_IceStateChangeNotification() const {
    return body_type() == FBS::Notification::Body::FBS_WebRtcTransport_IceStateChangeNotification ? static_cast<const FBS::WebRtcTransport::IceStateChangeNotification *>(body()) : nullptr;
  }
  const FBS::WebRtcTransport::DtlsStateChangeNotification *body_as_FBS_WebRtcTransport_DtlsStateChangeNotification() const {
    return body_type() == FBS::Notification::Body::FBS_WebRtcTransport_DtlsStateChangeNotification ? static_cast<const FBS::WebRtcTransport::DtlsStateChangeNotification *>(body()) : nullptr;
  }
  const FBS::PlainTransport::TupleNotification *body_as_FBS_PlainTransport_TupleNotification() const {
    return body_type() == FBS::Notification::Body::FBS_PlainTransport_TupleNotification ? static_cast<const FBS::PlainTransport::TupleNotification *>(body()) : nullptr;
  }
  const FBS::PlainTransport::RtcpTupleNotification *body_as_FBS_PlainTransport_RtcpTupleNotification() const {
    return body_type() == FBS::Notification::Body::FBS_PlainTransport_RtcpTupleNotification ? static_cast<const FBS::PlainTransport::RtcpTupleNotification *>(body()) : nullptr;
  }
  const FBS::DirectTransport::RtcpNotification *body_as_FBS_DirectTransport_RtcpNotification() const {
    return body_type() == FBS::Notification::Body::FBS_DirectTransport_RtcpNotification ? static_cast<const FBS::DirectTransport::RtcpNotification *>(body()) : nullptr;
  }
  const FBS::Producer::ScoreNotification *body_as_FBS_Producer_ScoreNotification() const {
    return body_type() == FBS::Notification::Body::FBS_Producer_ScoreNotification ? static_cast<const FBS::Producer::ScoreNotification *>(body()) : nullptr;
  }
  const FBS::Producer::TraceNotification *body_as_FBS_Producer_TraceNotification() const {
    return body_type() == FBS::Notification::Body::FBS_Producer_TraceNotification ? static_cast<const FBS::Producer::TraceNotification *>(body()) : nullptr;
  }
  const FBS::Producer::VideoOrientationChangeNotification *body_as_FBS_Producer_VideoOrientationChangeNotification() const {
    return body_type() == FBS::Notification::Body::FBS_Producer_VideoOrientationChangeNotification ? static_cast<const FBS::Producer::VideoOrientationChangeNotification *>(body()) : nullptr;
  }
  const FBS::Consumer::LayersChangeNotification *body_as_FBS_Consumer_LayersChangeNotification() const {
    return body_type() == FBS::Notification::Body::FBS_Consumer_LayersChangeNotification ? static_cast<const FBS::Consumer::LayersChangeNotification *>(body()) : nullptr;
  }
  const FBS::Consumer::RtpNotification *body_as_FBS_Consumer_RtpNotification() const {
    return body_type() == FBS::Notification::Body::FBS_Consumer_RtpNotification ? static_cast<const FBS::Consumer::RtpNotification *>(body()) : nullptr;
  }
  const FBS::Consumer::ScoreNotification *body_as_FBS_Consumer_ScoreNotification() const {
    return body_type() == FBS::Notification::Body::FBS_Consumer_ScoreNotification ? static_cast<const FBS::Consumer::ScoreNotification *>(body()) : nullptr;
  }
  const FBS::Consumer::TraceNotification *body_as_FBS_Consumer_TraceNotification() const {
    return body_type() == FBS::Notification::Body::FBS_Consumer_TraceNotification ? static_cast<const FBS::Consumer::TraceNotification *>(body()) : nullptr;
  }
  const FBS::DataConsumer::MessageNotification *body_as_FBS_DataConsumer_MessageNotification() const {
    return body_type() == FBS::Notification::Body::FBS_DataConsumer_MessageNotification ? static_cast<const FBS::DataConsumer::MessageNotification *>(body()) : nullptr;
  }
  const FBS::DataConsumer::BufferedAmountLowNotification *body_as_FBS_DataConsumer_BufferedAmountLowNotification() const {
    return body_type() == FBS::Notification::Body::FBS_DataConsumer_BufferedAmountLowNotification ? static_cast<const FBS::DataConsumer::BufferedAmountLowNotification *>(body()) : nullptr;
  }
  const FBS::ActiveSpeakerObserver::DominantSpeakerNotification *body_as_FBS_ActiveSpeakerObserver_DominantSpeakerNotification() const {
    return body_type() == FBS::Notification::Body::FBS_ActiveSpeakerObserver_DominantSpeakerNotification ? static_cast<const FBS::ActiveSpeakerObserver::DominantSpeakerNotification *>(body()) : nullptr;
  }
  const FBS::AudioLevelObserver::VolumesNotification *body_as_FBS_AudioLevelObserver_VolumesNotification() const {
    return body_type() == FBS::Notification::Body::FBS_AudioLevelObserver_VolumesNotification ? static_cast<const FBS::AudioLevelObserver::VolumesNotification *>(body()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_HANDLERID) &&
           verifier.VerifyString(handlerId()) &&
           VerifyField<uint8_t>(verifier, VT_EVENT, 1) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyBody(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const FBS::Transport::SendRtcpNotification *Notification::body_as<FBS::Transport::SendRtcpNotification>() const {
  return body_as_FBS_Transport_SendRtcpNotification();
}

template<> inline const FBS::Transport::SctpStateChangeNotification *Notification::body_as<FBS::Transport::SctpStateChangeNotification>() const {
  return body_as_FBS_Transport_SctpStateChangeNotification();
}

template<> inline const FBS::Producer::SendNotification *Notification::body_as<FBS::Producer::SendNotification>() const {
  return body_as_FBS_Producer_SendNotification();
}

template<> inline const FBS::DataProducer::SendNotification *Notification::body_as<FBS::DataProducer::SendNotification>() const {
  return body_as_FBS_DataProducer_SendNotification();
}

template<> inline const FBS::Transport::TraceNotification *Notification::body_as<FBS::Transport::TraceNotification>() const {
  return body_as_FBS_Transport_TraceNotification();
}

template<> inline const FBS::WebRtcTransport::IceSelectedTupleChangeNotification *Notification::body_as<FBS::WebRtcTransport::IceSelectedTupleChangeNotification>() const {
  return body_as_FBS_WebRtcTransport_IceSelectedTupleChangeNotification();
}

template<> inline const FBS::WebRtcTransport::IceStateChangeNotification *Notification::body_as<FBS::WebRtcTransport::IceStateChangeNotification>() const {
  return body_as_FBS_WebRtcTransport_IceStateChangeNotification();
}

template<> inline const FBS::WebRtcTransport::DtlsStateChangeNotification *Notification::body_as<FBS::WebRtcTransport::DtlsStateChangeNotification>() const {
  return body_as_FBS_WebRtcTransport_DtlsStateChangeNotification();
}

template<> inline const FBS::PlainTransport::TupleNotification *Notification::body_as<FBS::PlainTransport::TupleNotification>() const {
  return body_as_FBS_PlainTransport_TupleNotification();
}

template<> inline const FBS::PlainTransport::RtcpTupleNotification *Notification::body_as<FBS::PlainTransport::RtcpTupleNotification>() const {
  return body_as_FBS_PlainTransport_RtcpTupleNotification();
}

template<> inline const FBS::DirectTransport::RtcpNotification *Notification::body_as<FBS::DirectTransport::RtcpNotification>() const {
  return body_as_FBS_DirectTransport_RtcpNotification();
}

template<> inline const FBS::Producer::ScoreNotification *Notification::body_as<FBS::Producer::ScoreNotification>() const {
  return body_as_FBS_Producer_ScoreNotification();
}

template<> inline const FBS::Producer::TraceNotification *Notification::body_as<FBS::Producer::TraceNotification>() const {
  return body_as_FBS_Producer_TraceNotification();
}

template<> inline const FBS::Producer::VideoOrientationChangeNotification *Notification::body_as<FBS::Producer::VideoOrientationChangeNotification>() const {
  return body_as_FBS_Producer_VideoOrientationChangeNotification();
}

template<> inline const FBS::Consumer::LayersChangeNotification *Notification::body_as<FBS::Consumer::LayersChangeNotification>() const {
  return body_as_FBS_Consumer_LayersChangeNotification();
}

template<> inline const FBS::Consumer::RtpNotification *Notification::body_as<FBS::Consumer::RtpNotification>() const {
  return body_as_FBS_Consumer_RtpNotification();
}

template<> inline const FBS::Consumer::ScoreNotification *Notification::body_as<FBS::Consumer::ScoreNotification>() const {
  return body_as_FBS_Consumer_ScoreNotification();
}

template<> inline const FBS::Consumer::TraceNotification *Notification::body_as<FBS::Consumer::TraceNotification>() const {
  return body_as_FBS_Consumer_TraceNotification();
}

template<> inline const FBS::DataConsumer::MessageNotification *Notification::body_as<FBS::DataConsumer::MessageNotification>() const {
  return body_as_FBS_DataConsumer_MessageNotification();
}

template<> inline const FBS::DataConsumer::BufferedAmountLowNotification *Notification::body_as<FBS::DataConsumer::BufferedAmountLowNotification>() const {
  return body_as_FBS_DataConsumer_BufferedAmountLowNotification();
}

template<> inline const FBS::ActiveSpeakerObserver::DominantSpeakerNotification *Notification::body_as<FBS::ActiveSpeakerObserver::DominantSpeakerNotification>() const {
  return body_as_FBS_ActiveSpeakerObserver_DominantSpeakerNotification();
}

template<> inline const FBS::AudioLevelObserver::VolumesNotification *Notification::body_as<FBS::AudioLevelObserver::VolumesNotification>() const {
  return body_as_FBS_AudioLevelObserver_VolumesNotification();
}

struct NotificationBuilder {
  typedef Notification Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_handlerId(::flatbuffers::Offset<::flatbuffers::String> handlerId) {
    fbb_.AddOffset(Notification::VT_HANDLERID, handlerId);
  }
  void add_event(FBS::Notification::Event event) {
    fbb_.AddElement<uint8_t>(Notification::VT_EVENT, static_cast<uint8_t>(event), 0);
  }
  void add_body_type(FBS::Notification::Body body_type) {
    fbb_.AddElement<uint8_t>(Notification::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(::flatbuffers::Offset<void> body) {
    fbb_.AddOffset(Notification::VT_BODY, body);
  }
  explicit NotificationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Notification> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Notification>(end);
    fbb_.Required(o, Notification::VT_HANDLERID);
    return o;
  }
};

inline ::flatbuffers::Offset<Notification> CreateNotification(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> handlerId = 0,
    FBS::Notification::Event event = FBS::Notification::Event::TRANSPORT_SEND_RTCP,
    FBS::Notification::Body body_type = FBS::Notification::Body::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  NotificationBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_handlerId(handlerId);
  builder_.add_body_type(body_type);
  builder_.add_event(event);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Notification> CreateNotificationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *handlerId = nullptr,
    FBS::Notification::Event event = FBS::Notification::Event::TRANSPORT_SEND_RTCP,
    FBS::Notification::Body body_type = FBS::Notification::Body::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  auto handlerId__ = handlerId ? _fbb.CreateString(handlerId) : 0;
  return FBS::Notification::CreateNotification(
      _fbb,
      handlerId__,
      event,
      body_type,
      body);
}

inline bool VerifyBody(::flatbuffers::Verifier &verifier, const void *obj, Body type) {
  switch (type) {
    case Body::NONE: {
      return true;
    }
    case Body::FBS_Transport_SendRtcpNotification: {
      auto ptr = reinterpret_cast<const FBS::Transport::SendRtcpNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_SctpStateChangeNotification: {
      auto ptr = reinterpret_cast<const FBS::Transport::SctpStateChangeNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Producer_SendNotification: {
      auto ptr = reinterpret_cast<const FBS::Producer::SendNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_DataProducer_SendNotification: {
      auto ptr = reinterpret_cast<const FBS::DataProducer::SendNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_TraceNotification: {
      auto ptr = reinterpret_cast<const FBS::Transport::TraceNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_WebRtcTransport_IceSelectedTupleChangeNotification: {
      auto ptr = reinterpret_cast<const FBS::WebRtcTransport::IceSelectedTupleChangeNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_WebRtcTransport_IceStateChangeNotification: {
      auto ptr = reinterpret_cast<const FBS::WebRtcTransport::IceStateChangeNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_WebRtcTransport_DtlsStateChangeNotification: {
      auto ptr = reinterpret_cast<const FBS::WebRtcTransport::DtlsStateChangeNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_PlainTransport_TupleNotification: {
      auto ptr = reinterpret_cast<const FBS::PlainTransport::TupleNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_PlainTransport_RtcpTupleNotification: {
      auto ptr = reinterpret_cast<const FBS::PlainTransport::RtcpTupleNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_DirectTransport_RtcpNotification: {
      auto ptr = reinterpret_cast<const FBS::DirectTransport::RtcpNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Producer_ScoreNotification: {
      auto ptr = reinterpret_cast<const FBS::Producer::ScoreNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Producer_TraceNotification: {
      auto ptr = reinterpret_cast<const FBS::Producer::TraceNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Producer_VideoOrientationChangeNotification: {
      auto ptr = reinterpret_cast<const FBS::Producer::VideoOrientationChangeNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Consumer_LayersChangeNotification: {
      auto ptr = reinterpret_cast<const FBS::Consumer::LayersChangeNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Consumer_RtpNotification: {
      auto ptr = reinterpret_cast<const FBS::Consumer::RtpNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Consumer_ScoreNotification: {
      auto ptr = reinterpret_cast<const FBS::Consumer::ScoreNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Consumer_TraceNotification: {
      auto ptr = reinterpret_cast<const FBS::Consumer::TraceNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_DataConsumer_MessageNotification: {
      auto ptr = reinterpret_cast<const FBS::DataConsumer::MessageNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_DataConsumer_BufferedAmountLowNotification: {
      auto ptr = reinterpret_cast<const FBS::DataConsumer::BufferedAmountLowNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_ActiveSpeakerObserver_DominantSpeakerNotification: {
      auto ptr = reinterpret_cast<const FBS::ActiveSpeakerObserver::DominantSpeakerNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_AudioLevelObserver_VolumesNotification: {
      auto ptr = reinterpret_cast<const FBS::AudioLevelObserver::VolumesNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyBodyVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Body> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyBody(
        verifier,  values->Get(i), types->GetEnum<Body>(i))) {
      return false;
    }
  }
  return true;
}

inline const ::flatbuffers::TypeTable *EventTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Notification::EventTypeTable
  };
  static const char * const names[] = {
    "TRANSPORT_SEND_RTCP",
    "PRODUCER_SEND",
    "DATAPRODUCER_SEND",
    "WORKER_RUNNING",
    "TRANSPORT_SCTP_STATE_CHANGE",
    "TRANSPORT_TRACE",
    "WEBRTCTRANSPORT_ICE_SELECTED_TUPLE_CHANGE",
    "WEBRTCTRANSPORT_ICE_STATE_CHANGE",
    "WEBRTCTRANSPORT_DTLS_STATE_CHANGE",
    "PLAINTRANSPORT_TUPLE",
    "PLAINTRANSPORT_RTCP_TUPLE",
    "DIRECTTRANSPORT_RTCP",
    "PRODUCER_SCORE",
    "PRODUCER_TRACE",
    "PRODUCER_VIDEO_ORIENTATION_CHANGE",
    "CONSUMER_PRODUCER_PAUSE",
    "CONSUMER_PRODUCER_RESUME",
    "CONSUMER_PRODUCER_CLOSE",
    "CONSUMER_LAYERS_CHANGE",
    "CONSUMER_RTP",
    "CONSUMER_SCORE",
    "CONSUMER_TRACE",
    "DATACONSUMER_BUFFERED_AMOUNT_LOW",
    "DATACONSUMER_SCTP_SENDBUFFER_FULL",
    "DATACONSUMER_DATAPRODUCER_PAUSE",
    "DATACONSUMER_DATAPRODUCER_RESUME",
    "DATACONSUMER_DATAPRODUCER_CLOSE",
    "DATACONSUMER_MESSAGE",
    "ACTIVESPEAKEROBSERVER_DOMINANT_SPEAKER",
    "AUDIOLEVELOBSERVER_SILENCE",
    "AUDIOLEVELOBSERVER_VOLUMES"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 31, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *BodyTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 },
    { ::flatbuffers::ET_SEQUENCE, 0, 3 },
    { ::flatbuffers::ET_SEQUENCE, 0, 4 },
    { ::flatbuffers::ET_SEQUENCE, 0, 5 },
    { ::flatbuffers::ET_SEQUENCE, 0, 6 },
    { ::flatbuffers::ET_SEQUENCE, 0, 7 },
    { ::flatbuffers::ET_SEQUENCE, 0, 8 },
    { ::flatbuffers::ET_SEQUENCE, 0, 9 },
    { ::flatbuffers::ET_SEQUENCE, 0, 10 },
    { ::flatbuffers::ET_SEQUENCE, 0, 11 },
    { ::flatbuffers::ET_SEQUENCE, 0, 12 },
    { ::flatbuffers::ET_SEQUENCE, 0, 13 },
    { ::flatbuffers::ET_SEQUENCE, 0, 14 },
    { ::flatbuffers::ET_SEQUENCE, 0, 15 },
    { ::flatbuffers::ET_SEQUENCE, 0, 16 },
    { ::flatbuffers::ET_SEQUENCE, 0, 17 },
    { ::flatbuffers::ET_SEQUENCE, 0, 18 },
    { ::flatbuffers::ET_SEQUENCE, 0, 19 },
    { ::flatbuffers::ET_SEQUENCE, 0, 20 },
    { ::flatbuffers::ET_SEQUENCE, 0, 21 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::SendRtcpNotificationTypeTable,
    FBS::Transport::SctpStateChangeNotificationTypeTable,
    FBS::Producer::SendNotificationTypeTable,
    FBS::DataProducer::SendNotificationTypeTable,
    FBS::Transport::TraceNotificationTypeTable,
    FBS::WebRtcTransport::IceSelectedTupleChangeNotificationTypeTable,
    FBS::WebRtcTransport::IceStateChangeNotificationTypeTable,
    FBS::WebRtcTransport::DtlsStateChangeNotificationTypeTable,
    FBS::PlainTransport::TupleNotificationTypeTable,
    FBS::PlainTransport::RtcpTupleNotificationTypeTable,
    FBS::DirectTransport::RtcpNotificationTypeTable,
    FBS::Producer::ScoreNotificationTypeTable,
    FBS::Producer::TraceNotificationTypeTable,
    FBS::Producer::VideoOrientationChangeNotificationTypeTable,
    FBS::Consumer::LayersChangeNotificationTypeTable,
    FBS::Consumer::RtpNotificationTypeTable,
    FBS::Consumer::ScoreNotificationTypeTable,
    FBS::Consumer::TraceNotificationTypeTable,
    FBS::DataConsumer::MessageNotificationTypeTable,
    FBS::DataConsumer::BufferedAmountLowNotificationTypeTable,
    FBS::ActiveSpeakerObserver::DominantSpeakerNotificationTypeTable,
    FBS::AudioLevelObserver::VolumesNotificationTypeTable
  };
  static const char * const names[] = {
    "NONE",
    "FBS_Transport_SendRtcpNotification",
    "FBS_Transport_SctpStateChangeNotification",
    "FBS_Producer_SendNotification",
    "FBS_DataProducer_SendNotification",
    "FBS_Transport_TraceNotification",
    "FBS_WebRtcTransport_IceSelectedTupleChangeNotification",
    "FBS_WebRtcTransport_IceStateChangeNotification",
    "FBS_WebRtcTransport_DtlsStateChangeNotification",
    "FBS_PlainTransport_TupleNotification",
    "FBS_PlainTransport_RtcpTupleNotification",
    "FBS_DirectTransport_RtcpNotification",
    "FBS_Producer_ScoreNotification",
    "FBS_Producer_TraceNotification",
    "FBS_Producer_VideoOrientationChangeNotification",
    "FBS_Consumer_LayersChangeNotification",
    "FBS_Consumer_RtpNotification",
    "FBS_Consumer_ScoreNotification",
    "FBS_Consumer_TraceNotification",
    "FBS_DataConsumer_MessageNotification",
    "FBS_DataConsumer_BufferedAmountLowNotification",
    "FBS_ActiveSpeakerObserver_DominantSpeakerNotification",
    "FBS_AudioLevelObserver_VolumesNotification"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_UNION, 23, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *NotificationTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UTYPE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Notification::EventTypeTable,
    FBS::Notification::BodyTypeTable
  };
  static const char * const names[] = {
    "handlerId",
    "event",
    "body_type",
    "body"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace Notification
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_NOTIFICATION_FBS_NOTIFICATION_H_
