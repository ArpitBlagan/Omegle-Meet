// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUEST_FBS_REQUEST_H_
#define FLATBUFFERS_GENERATED_REQUEST_FBS_REQUEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

#include "consumer_generated.h"
#include "dataConsumer_generated.h"
#include "producer_generated.h"
#include "router_generated.h"
#include "rtpObserver_generated.h"
#include "transport_generated.h"
#include "worker_generated.h"

namespace FBS {
namespace Request {

struct Request;
struct RequestBuilder;

inline const ::flatbuffers::TypeTable *RequestTypeTable();

enum class Method : uint8_t {
  WORKER_CLOSE = 0,
  WORKER_DUMP = 1,
  WORKER_GET_RESOURCE_USAGE = 2,
  WORKER_UPDATE_SETTINGS = 3,
  WORKER_CREATE_WEBRTCSERVER = 4,
  WORKER_CREATE_ROUTER = 5,
  WORKER_WEBRTCSERVER_CLOSE = 6,
  WORKER_CLOSE_ROUTER = 7,
  WEBRTCSERVER_DUMP = 8,
  ROUTER_DUMP = 9,
  ROUTER_CREATE_WEBRTCTRANSPORT = 10,
  ROUTER_CREATE_WEBRTCTRANSPORT_WITH_SERVER = 11,
  ROUTER_CREATE_PLAINTRANSPORT = 12,
  ROUTER_CREATE_PIPETRANSPORT = 13,
  ROUTER_CREATE_DIRECTTRANSPORT = 14,
  ROUTER_CLOSE_TRANSPORT = 15,
  ROUTER_CREATE_ACTIVESPEAKEROBSERVER = 16,
  ROUTER_CREATE_AUDIOLEVELOBSERVER = 17,
  ROUTER_CLOSE_RTPOBSERVER = 18,
  TRANSPORT_DUMP = 19,
  TRANSPORT_GET_STATS = 20,
  TRANSPORT_CONNECT = 21,
  TRANSPORT_SET_MAX_INCOMING_BITRATE = 22,
  TRANSPORT_SET_MAX_OUTGOING_BITRATE = 23,
  TRANSPORT_SET_MIN_OUTGOING_BITRATE = 24,
  TRANSPORT_RESTART_ICE = 25,
  TRANSPORT_PRODUCE = 26,
  TRANSPORT_PRODUCE_DATA = 27,
  TRANSPORT_CONSUME = 28,
  TRANSPORT_CONSUME_DATA = 29,
  TRANSPORT_ENABLE_TRACE_EVENT = 30,
  TRANSPORT_CLOSE_PRODUCER = 31,
  TRANSPORT_CLOSE_CONSUMER = 32,
  TRANSPORT_CLOSE_DATAPRODUCER = 33,
  TRANSPORT_CLOSE_DATACONSUMER = 34,
  PLAINTRANSPORT_CONNECT = 35,
  PIPETRANSPORT_CONNECT = 36,
  WEBRTCTRANSPORT_CONNECT = 37,
  PRODUCER_DUMP = 38,
  PRODUCER_GET_STATS = 39,
  PRODUCER_PAUSE = 40,
  PRODUCER_RESUME = 41,
  PRODUCER_ENABLE_TRACE_EVENT = 42,
  CONSUMER_DUMP = 43,
  CONSUMER_GET_STATS = 44,
  CONSUMER_PAUSE = 45,
  CONSUMER_RESUME = 46,
  CONSUMER_SET_PREFERRED_LAYERS = 47,
  CONSUMER_SET_PRIORITY = 48,
  CONSUMER_REQUEST_KEY_FRAME = 49,
  CONSUMER_ENABLE_TRACE_EVENT = 50,
  DATAPRODUCER_DUMP = 51,
  DATAPRODUCER_GET_STATS = 52,
  DATAPRODUCER_PAUSE = 53,
  DATAPRODUCER_RESUME = 54,
  DATACONSUMER_DUMP = 55,
  DATACONSUMER_GET_STATS = 56,
  DATACONSUMER_PAUSE = 57,
  DATACONSUMER_RESUME = 58,
  DATACONSUMER_GET_BUFFERED_AMOUNT = 59,
  DATACONSUMER_SET_BUFFERED_AMOUNT_LOW_THRESHOLD = 60,
  DATACONSUMER_SEND = 61,
  DATACONSUMER_SET_SUBCHANNELS = 62,
  RTPOBSERVER_PAUSE = 63,
  RTPOBSERVER_RESUME = 64,
  RTPOBSERVER_ADD_PRODUCER = 65,
  RTPOBSERVER_REMOVE_PRODUCER = 66,
  MIN = WORKER_CLOSE,
  MAX = RTPOBSERVER_REMOVE_PRODUCER
};

inline const Method (&EnumValuesMethod())[67] {
  static const Method values[] = {
    Method::WORKER_CLOSE,
    Method::WORKER_DUMP,
    Method::WORKER_GET_RESOURCE_USAGE,
    Method::WORKER_UPDATE_SETTINGS,
    Method::WORKER_CREATE_WEBRTCSERVER,
    Method::WORKER_CREATE_ROUTER,
    Method::WORKER_WEBRTCSERVER_CLOSE,
    Method::WORKER_CLOSE_ROUTER,
    Method::WEBRTCSERVER_DUMP,
    Method::ROUTER_DUMP,
    Method::ROUTER_CREATE_WEBRTCTRANSPORT,
    Method::ROUTER_CREATE_WEBRTCTRANSPORT_WITH_SERVER,
    Method::ROUTER_CREATE_PLAINTRANSPORT,
    Method::ROUTER_CREATE_PIPETRANSPORT,
    Method::ROUTER_CREATE_DIRECTTRANSPORT,
    Method::ROUTER_CLOSE_TRANSPORT,
    Method::ROUTER_CREATE_ACTIVESPEAKEROBSERVER,
    Method::ROUTER_CREATE_AUDIOLEVELOBSERVER,
    Method::ROUTER_CLOSE_RTPOBSERVER,
    Method::TRANSPORT_DUMP,
    Method::TRANSPORT_GET_STATS,
    Method::TRANSPORT_CONNECT,
    Method::TRANSPORT_SET_MAX_INCOMING_BITRATE,
    Method::TRANSPORT_SET_MAX_OUTGOING_BITRATE,
    Method::TRANSPORT_SET_MIN_OUTGOING_BITRATE,
    Method::TRANSPORT_RESTART_ICE,
    Method::TRANSPORT_PRODUCE,
    Method::TRANSPORT_PRODUCE_DATA,
    Method::TRANSPORT_CONSUME,
    Method::TRANSPORT_CONSUME_DATA,
    Method::TRANSPORT_ENABLE_TRACE_EVENT,
    Method::TRANSPORT_CLOSE_PRODUCER,
    Method::TRANSPORT_CLOSE_CONSUMER,
    Method::TRANSPORT_CLOSE_DATAPRODUCER,
    Method::TRANSPORT_CLOSE_DATACONSUMER,
    Method::PLAINTRANSPORT_CONNECT,
    Method::PIPETRANSPORT_CONNECT,
    Method::WEBRTCTRANSPORT_CONNECT,
    Method::PRODUCER_DUMP,
    Method::PRODUCER_GET_STATS,
    Method::PRODUCER_PAUSE,
    Method::PRODUCER_RESUME,
    Method::PRODUCER_ENABLE_TRACE_EVENT,
    Method::CONSUMER_DUMP,
    Method::CONSUMER_GET_STATS,
    Method::CONSUMER_PAUSE,
    Method::CONSUMER_RESUME,
    Method::CONSUMER_SET_PREFERRED_LAYERS,
    Method::CONSUMER_SET_PRIORITY,
    Method::CONSUMER_REQUEST_KEY_FRAME,
    Method::CONSUMER_ENABLE_TRACE_EVENT,
    Method::DATAPRODUCER_DUMP,
    Method::DATAPRODUCER_GET_STATS,
    Method::DATAPRODUCER_PAUSE,
    Method::DATAPRODUCER_RESUME,
    Method::DATACONSUMER_DUMP,
    Method::DATACONSUMER_GET_STATS,
    Method::DATACONSUMER_PAUSE,
    Method::DATACONSUMER_RESUME,
    Method::DATACONSUMER_GET_BUFFERED_AMOUNT,
    Method::DATACONSUMER_SET_BUFFERED_AMOUNT_LOW_THRESHOLD,
    Method::DATACONSUMER_SEND,
    Method::DATACONSUMER_SET_SUBCHANNELS,
    Method::RTPOBSERVER_PAUSE,
    Method::RTPOBSERVER_RESUME,
    Method::RTPOBSERVER_ADD_PRODUCER,
    Method::RTPOBSERVER_REMOVE_PRODUCER
  };
  return values;
}

inline const char * const *EnumNamesMethod() {
  static const char * const names[68] = {
    "WORKER_CLOSE",
    "WORKER_DUMP",
    "WORKER_GET_RESOURCE_USAGE",
    "WORKER_UPDATE_SETTINGS",
    "WORKER_CREATE_WEBRTCSERVER",
    "WORKER_CREATE_ROUTER",
    "WORKER_WEBRTCSERVER_CLOSE",
    "WORKER_CLOSE_ROUTER",
    "WEBRTCSERVER_DUMP",
    "ROUTER_DUMP",
    "ROUTER_CREATE_WEBRTCTRANSPORT",
    "ROUTER_CREATE_WEBRTCTRANSPORT_WITH_SERVER",
    "ROUTER_CREATE_PLAINTRANSPORT",
    "ROUTER_CREATE_PIPETRANSPORT",
    "ROUTER_CREATE_DIRECTTRANSPORT",
    "ROUTER_CLOSE_TRANSPORT",
    "ROUTER_CREATE_ACTIVESPEAKEROBSERVER",
    "ROUTER_CREATE_AUDIOLEVELOBSERVER",
    "ROUTER_CLOSE_RTPOBSERVER",
    "TRANSPORT_DUMP",
    "TRANSPORT_GET_STATS",
    "TRANSPORT_CONNECT",
    "TRANSPORT_SET_MAX_INCOMING_BITRATE",
    "TRANSPORT_SET_MAX_OUTGOING_BITRATE",
    "TRANSPORT_SET_MIN_OUTGOING_BITRATE",
    "TRANSPORT_RESTART_ICE",
    "TRANSPORT_PRODUCE",
    "TRANSPORT_PRODUCE_DATA",
    "TRANSPORT_CONSUME",
    "TRANSPORT_CONSUME_DATA",
    "TRANSPORT_ENABLE_TRACE_EVENT",
    "TRANSPORT_CLOSE_PRODUCER",
    "TRANSPORT_CLOSE_CONSUMER",
    "TRANSPORT_CLOSE_DATAPRODUCER",
    "TRANSPORT_CLOSE_DATACONSUMER",
    "PLAINTRANSPORT_CONNECT",
    "PIPETRANSPORT_CONNECT",
    "WEBRTCTRANSPORT_CONNECT",
    "PRODUCER_DUMP",
    "PRODUCER_GET_STATS",
    "PRODUCER_PAUSE",
    "PRODUCER_RESUME",
    "PRODUCER_ENABLE_TRACE_EVENT",
    "CONSUMER_DUMP",
    "CONSUMER_GET_STATS",
    "CONSUMER_PAUSE",
    "CONSUMER_RESUME",
    "CONSUMER_SET_PREFERRED_LAYERS",
    "CONSUMER_SET_PRIORITY",
    "CONSUMER_REQUEST_KEY_FRAME",
    "CONSUMER_ENABLE_TRACE_EVENT",
    "DATAPRODUCER_DUMP",
    "DATAPRODUCER_GET_STATS",
    "DATAPRODUCER_PAUSE",
    "DATAPRODUCER_RESUME",
    "DATACONSUMER_DUMP",
    "DATACONSUMER_GET_STATS",
    "DATACONSUMER_PAUSE",
    "DATACONSUMER_RESUME",
    "DATACONSUMER_GET_BUFFERED_AMOUNT",
    "DATACONSUMER_SET_BUFFERED_AMOUNT_LOW_THRESHOLD",
    "DATACONSUMER_SEND",
    "DATACONSUMER_SET_SUBCHANNELS",
    "RTPOBSERVER_PAUSE",
    "RTPOBSERVER_RESUME",
    "RTPOBSERVER_ADD_PRODUCER",
    "RTPOBSERVER_REMOVE_PRODUCER",
    nullptr
  };
  return names;
}

inline const char *EnumNameMethod(Method e) {
  if (::flatbuffers::IsOutRange(e, Method::WORKER_CLOSE, Method::RTPOBSERVER_REMOVE_PRODUCER)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMethod()[index];
}

enum class Body : uint8_t {
  NONE = 0,
  FBS_Worker_UpdateSettingsRequest = 1,
  FBS_Worker_CreateWebRtcServerRequest = 2,
  FBS_Worker_CloseWebRtcServerRequest = 3,
  FBS_Worker_CreateRouterRequest = 4,
  FBS_Worker_CloseRouterRequest = 5,
  FBS_Router_CreateWebRtcTransportRequest = 6,
  FBS_Router_CreatePlainTransportRequest = 7,
  FBS_Router_CreatePipeTransportRequest = 8,
  FBS_Router_CreateDirectTransportRequest = 9,
  FBS_Router_CreateActiveSpeakerObserverRequest = 10,
  FBS_Router_CreateAudioLevelObserverRequest = 11,
  FBS_Router_CloseTransportRequest = 12,
  FBS_Router_CloseRtpObserverRequest = 13,
  FBS_Transport_SetMaxIncomingBitrateRequest = 14,
  FBS_Transport_SetMaxOutgoingBitrateRequest = 15,
  FBS_Transport_SetMinOutgoingBitrateRequest = 16,
  FBS_Transport_ProduceRequest = 17,
  FBS_Transport_ConsumeRequest = 18,
  FBS_Transport_ProduceDataRequest = 19,
  FBS_Transport_ConsumeDataRequest = 20,
  FBS_Transport_EnableTraceEventRequest = 21,
  FBS_Transport_CloseProducerRequest = 22,
  FBS_Transport_CloseConsumerRequest = 23,
  FBS_Transport_CloseDataProducerRequest = 24,
  FBS_Transport_CloseDataConsumerRequest = 25,
  PlainTransport_ConnectRequest = 26,
  PipeTransport_ConnectRequest = 27,
  FBS_WebRtcTransport_ConnectRequest = 28,
  FBS_Producer_EnableTraceEventRequest = 29,
  FBS_Consumer_SetPreferredLayersRequest = 30,
  FBS_Consumer_SetPriorityRequest = 31,
  FBS_Consumer_EnableTraceEventRequest = 32,
  FBS_DataConsumer_SetBufferedAmountLowThresholdRequest = 33,
  FBS_DataConsumer_SendRequest = 34,
  FBS_DataConsumer_SetSubchannelsRequest = 35,
  FBS_RtpObserver_AddProducerRequest = 36,
  FBS_RtpObserver_RemoveProducerRequest = 37,
  MIN = NONE,
  MAX = FBS_RtpObserver_RemoveProducerRequest
};

inline const Body (&EnumValuesBody())[38] {
  static const Body values[] = {
    Body::NONE,
    Body::FBS_Worker_UpdateSettingsRequest,
    Body::FBS_Worker_CreateWebRtcServerRequest,
    Body::FBS_Worker_CloseWebRtcServerRequest,
    Body::FBS_Worker_CreateRouterRequest,
    Body::FBS_Worker_CloseRouterRequest,
    Body::FBS_Router_CreateWebRtcTransportRequest,
    Body::FBS_Router_CreatePlainTransportRequest,
    Body::FBS_Router_CreatePipeTransportRequest,
    Body::FBS_Router_CreateDirectTransportRequest,
    Body::FBS_Router_CreateActiveSpeakerObserverRequest,
    Body::FBS_Router_CreateAudioLevelObserverRequest,
    Body::FBS_Router_CloseTransportRequest,
    Body::FBS_Router_CloseRtpObserverRequest,
    Body::FBS_Transport_SetMaxIncomingBitrateRequest,
    Body::FBS_Transport_SetMaxOutgoingBitrateRequest,
    Body::FBS_Transport_SetMinOutgoingBitrateRequest,
    Body::FBS_Transport_ProduceRequest,
    Body::FBS_Transport_ConsumeRequest,
    Body::FBS_Transport_ProduceDataRequest,
    Body::FBS_Transport_ConsumeDataRequest,
    Body::FBS_Transport_EnableTraceEventRequest,
    Body::FBS_Transport_CloseProducerRequest,
    Body::FBS_Transport_CloseConsumerRequest,
    Body::FBS_Transport_CloseDataProducerRequest,
    Body::FBS_Transport_CloseDataConsumerRequest,
    Body::PlainTransport_ConnectRequest,
    Body::PipeTransport_ConnectRequest,
    Body::FBS_WebRtcTransport_ConnectRequest,
    Body::FBS_Producer_EnableTraceEventRequest,
    Body::FBS_Consumer_SetPreferredLayersRequest,
    Body::FBS_Consumer_SetPriorityRequest,
    Body::FBS_Consumer_EnableTraceEventRequest,
    Body::FBS_DataConsumer_SetBufferedAmountLowThresholdRequest,
    Body::FBS_DataConsumer_SendRequest,
    Body::FBS_DataConsumer_SetSubchannelsRequest,
    Body::FBS_RtpObserver_AddProducerRequest,
    Body::FBS_RtpObserver_RemoveProducerRequest
  };
  return values;
}

inline const char * const *EnumNamesBody() {
  static const char * const names[39] = {
    "NONE",
    "FBS_Worker_UpdateSettingsRequest",
    "FBS_Worker_CreateWebRtcServerRequest",
    "FBS_Worker_CloseWebRtcServerRequest",
    "FBS_Worker_CreateRouterRequest",
    "FBS_Worker_CloseRouterRequest",
    "FBS_Router_CreateWebRtcTransportRequest",
    "FBS_Router_CreatePlainTransportRequest",
    "FBS_Router_CreatePipeTransportRequest",
    "FBS_Router_CreateDirectTransportRequest",
    "FBS_Router_CreateActiveSpeakerObserverRequest",
    "FBS_Router_CreateAudioLevelObserverRequest",
    "FBS_Router_CloseTransportRequest",
    "FBS_Router_CloseRtpObserverRequest",
    "FBS_Transport_SetMaxIncomingBitrateRequest",
    "FBS_Transport_SetMaxOutgoingBitrateRequest",
    "FBS_Transport_SetMinOutgoingBitrateRequest",
    "FBS_Transport_ProduceRequest",
    "FBS_Transport_ConsumeRequest",
    "FBS_Transport_ProduceDataRequest",
    "FBS_Transport_ConsumeDataRequest",
    "FBS_Transport_EnableTraceEventRequest",
    "FBS_Transport_CloseProducerRequest",
    "FBS_Transport_CloseConsumerRequest",
    "FBS_Transport_CloseDataProducerRequest",
    "FBS_Transport_CloseDataConsumerRequest",
    "PlainTransport_ConnectRequest",
    "PipeTransport_ConnectRequest",
    "FBS_WebRtcTransport_ConnectRequest",
    "FBS_Producer_EnableTraceEventRequest",
    "FBS_Consumer_SetPreferredLayersRequest",
    "FBS_Consumer_SetPriorityRequest",
    "FBS_Consumer_EnableTraceEventRequest",
    "FBS_DataConsumer_SetBufferedAmountLowThresholdRequest",
    "FBS_DataConsumer_SendRequest",
    "FBS_DataConsumer_SetSubchannelsRequest",
    "FBS_RtpObserver_AddProducerRequest",
    "FBS_RtpObserver_RemoveProducerRequest",
    nullptr
  };
  return names;
}

inline const char *EnumNameBody(Body e) {
  if (::flatbuffers::IsOutRange(e, Body::NONE, Body::FBS_RtpObserver_RemoveProducerRequest)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBody()[index];
}

template<typename T> struct BodyTraits {
  static const Body enum_value = Body::NONE;
};

template<> struct BodyTraits<FBS::Worker::UpdateSettingsRequest> {
  static const Body enum_value = Body::FBS_Worker_UpdateSettingsRequest;
};

template<> struct BodyTraits<FBS::Worker::CreateWebRtcServerRequest> {
  static const Body enum_value = Body::FBS_Worker_CreateWebRtcServerRequest;
};

template<> struct BodyTraits<FBS::Worker::CloseWebRtcServerRequest> {
  static const Body enum_value = Body::FBS_Worker_CloseWebRtcServerRequest;
};

template<> struct BodyTraits<FBS::Worker::CreateRouterRequest> {
  static const Body enum_value = Body::FBS_Worker_CreateRouterRequest;
};

template<> struct BodyTraits<FBS::Worker::CloseRouterRequest> {
  static const Body enum_value = Body::FBS_Worker_CloseRouterRequest;
};

template<> struct BodyTraits<FBS::Router::CreateWebRtcTransportRequest> {
  static const Body enum_value = Body::FBS_Router_CreateWebRtcTransportRequest;
};

template<> struct BodyTraits<FBS::Router::CreatePlainTransportRequest> {
  static const Body enum_value = Body::FBS_Router_CreatePlainTransportRequest;
};

template<> struct BodyTraits<FBS::Router::CreatePipeTransportRequest> {
  static const Body enum_value = Body::FBS_Router_CreatePipeTransportRequest;
};

template<> struct BodyTraits<FBS::Router::CreateDirectTransportRequest> {
  static const Body enum_value = Body::FBS_Router_CreateDirectTransportRequest;
};

template<> struct BodyTraits<FBS::Router::CreateActiveSpeakerObserverRequest> {
  static const Body enum_value = Body::FBS_Router_CreateActiveSpeakerObserverRequest;
};

template<> struct BodyTraits<FBS::Router::CreateAudioLevelObserverRequest> {
  static const Body enum_value = Body::FBS_Router_CreateAudioLevelObserverRequest;
};

template<> struct BodyTraits<FBS::Router::CloseTransportRequest> {
  static const Body enum_value = Body::FBS_Router_CloseTransportRequest;
};

template<> struct BodyTraits<FBS::Router::CloseRtpObserverRequest> {
  static const Body enum_value = Body::FBS_Router_CloseRtpObserverRequest;
};

template<> struct BodyTraits<FBS::Transport::SetMaxIncomingBitrateRequest> {
  static const Body enum_value = Body::FBS_Transport_SetMaxIncomingBitrateRequest;
};

template<> struct BodyTraits<FBS::Transport::SetMaxOutgoingBitrateRequest> {
  static const Body enum_value = Body::FBS_Transport_SetMaxOutgoingBitrateRequest;
};

template<> struct BodyTraits<FBS::Transport::SetMinOutgoingBitrateRequest> {
  static const Body enum_value = Body::FBS_Transport_SetMinOutgoingBitrateRequest;
};

template<> struct BodyTraits<FBS::Transport::ProduceRequest> {
  static const Body enum_value = Body::FBS_Transport_ProduceRequest;
};

template<> struct BodyTraits<FBS::Transport::ConsumeRequest> {
  static const Body enum_value = Body::FBS_Transport_ConsumeRequest;
};

template<> struct BodyTraits<FBS::Transport::ProduceDataRequest> {
  static const Body enum_value = Body::FBS_Transport_ProduceDataRequest;
};

template<> struct BodyTraits<FBS::Transport::ConsumeDataRequest> {
  static const Body enum_value = Body::FBS_Transport_ConsumeDataRequest;
};

template<> struct BodyTraits<FBS::Transport::EnableTraceEventRequest> {
  static const Body enum_value = Body::FBS_Transport_EnableTraceEventRequest;
};

template<> struct BodyTraits<FBS::Transport::CloseProducerRequest> {
  static const Body enum_value = Body::FBS_Transport_CloseProducerRequest;
};

template<> struct BodyTraits<FBS::Transport::CloseConsumerRequest> {
  static const Body enum_value = Body::FBS_Transport_CloseConsumerRequest;
};

template<> struct BodyTraits<FBS::Transport::CloseDataProducerRequest> {
  static const Body enum_value = Body::FBS_Transport_CloseDataProducerRequest;
};

template<> struct BodyTraits<FBS::Transport::CloseDataConsumerRequest> {
  static const Body enum_value = Body::FBS_Transport_CloseDataConsumerRequest;
};

template<> struct BodyTraits<FBS::PlainTransport::ConnectRequest> {
  static const Body enum_value = Body::PlainTransport_ConnectRequest;
};

template<> struct BodyTraits<FBS::PipeTransport::ConnectRequest> {
  static const Body enum_value = Body::PipeTransport_ConnectRequest;
};

template<> struct BodyTraits<FBS::WebRtcTransport::ConnectRequest> {
  static const Body enum_value = Body::FBS_WebRtcTransport_ConnectRequest;
};

template<> struct BodyTraits<FBS::Producer::EnableTraceEventRequest> {
  static const Body enum_value = Body::FBS_Producer_EnableTraceEventRequest;
};

template<> struct BodyTraits<FBS::Consumer::SetPreferredLayersRequest> {
  static const Body enum_value = Body::FBS_Consumer_SetPreferredLayersRequest;
};

template<> struct BodyTraits<FBS::Consumer::SetPriorityRequest> {
  static const Body enum_value = Body::FBS_Consumer_SetPriorityRequest;
};

template<> struct BodyTraits<FBS::Consumer::EnableTraceEventRequest> {
  static const Body enum_value = Body::FBS_Consumer_EnableTraceEventRequest;
};

template<> struct BodyTraits<FBS::DataConsumer::SetBufferedAmountLowThresholdRequest> {
  static const Body enum_value = Body::FBS_DataConsumer_SetBufferedAmountLowThresholdRequest;
};

template<> struct BodyTraits<FBS::DataConsumer::SendRequest> {
  static const Body enum_value = Body::FBS_DataConsumer_SendRequest;
};

template<> struct BodyTraits<FBS::DataConsumer::SetSubchannelsRequest> {
  static const Body enum_value = Body::FBS_DataConsumer_SetSubchannelsRequest;
};

template<> struct BodyTraits<FBS::RtpObserver::AddProducerRequest> {
  static const Body enum_value = Body::FBS_RtpObserver_AddProducerRequest;
};

template<> struct BodyTraits<FBS::RtpObserver::RemoveProducerRequest> {
  static const Body enum_value = Body::FBS_RtpObserver_RemoveProducerRequest;
};

bool VerifyBody(::flatbuffers::Verifier &verifier, const void *obj, Body type);
bool VerifyBodyVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Body> *types);

struct Request FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return RequestTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_METHOD = 6,
    VT_HANDLERID = 8,
    VT_BODY_TYPE = 10,
    VT_BODY = 12
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  FBS::Request::Method method() const {
    return static_cast<FBS::Request::Method>(GetField<uint8_t>(VT_METHOD, 0));
  }
  const ::flatbuffers::String *handlerId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HANDLERID);
  }
  FBS::Request::Body body_type() const {
    return static_cast<FBS::Request::Body>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const FBS::Worker::UpdateSettingsRequest *body_as_FBS_Worker_UpdateSettingsRequest() const {
    return body_type() == FBS::Request::Body::FBS_Worker_UpdateSettingsRequest ? static_cast<const FBS::Worker::UpdateSettingsRequest *>(body()) : nullptr;
  }
  const FBS::Worker::CreateWebRtcServerRequest *body_as_FBS_Worker_CreateWebRtcServerRequest() const {
    return body_type() == FBS::Request::Body::FBS_Worker_CreateWebRtcServerRequest ? static_cast<const FBS::Worker::CreateWebRtcServerRequest *>(body()) : nullptr;
  }
  const FBS::Worker::CloseWebRtcServerRequest *body_as_FBS_Worker_CloseWebRtcServerRequest() const {
    return body_type() == FBS::Request::Body::FBS_Worker_CloseWebRtcServerRequest ? static_cast<const FBS::Worker::CloseWebRtcServerRequest *>(body()) : nullptr;
  }
  const FBS::Worker::CreateRouterRequest *body_as_FBS_Worker_CreateRouterRequest() const {
    return body_type() == FBS::Request::Body::FBS_Worker_CreateRouterRequest ? static_cast<const FBS::Worker::CreateRouterRequest *>(body()) : nullptr;
  }
  const FBS::Worker::CloseRouterRequest *body_as_FBS_Worker_CloseRouterRequest() const {
    return body_type() == FBS::Request::Body::FBS_Worker_CloseRouterRequest ? static_cast<const FBS::Worker::CloseRouterRequest *>(body()) : nullptr;
  }
  const FBS::Router::CreateWebRtcTransportRequest *body_as_FBS_Router_CreateWebRtcTransportRequest() const {
    return body_type() == FBS::Request::Body::FBS_Router_CreateWebRtcTransportRequest ? static_cast<const FBS::Router::CreateWebRtcTransportRequest *>(body()) : nullptr;
  }
  const FBS::Router::CreatePlainTransportRequest *body_as_FBS_Router_CreatePlainTransportRequest() const {
    return body_type() == FBS::Request::Body::FBS_Router_CreatePlainTransportRequest ? static_cast<const FBS::Router::CreatePlainTransportRequest *>(body()) : nullptr;
  }
  const FBS::Router::CreatePipeTransportRequest *body_as_FBS_Router_CreatePipeTransportRequest() const {
    return body_type() == FBS::Request::Body::FBS_Router_CreatePipeTransportRequest ? static_cast<const FBS::Router::CreatePipeTransportRequest *>(body()) : nullptr;
  }
  const FBS::Router::CreateDirectTransportRequest *body_as_FBS_Router_CreateDirectTransportRequest() const {
    return body_type() == FBS::Request::Body::FBS_Router_CreateDirectTransportRequest ? static_cast<const FBS::Router::CreateDirectTransportRequest *>(body()) : nullptr;
  }
  const FBS::Router::CreateActiveSpeakerObserverRequest *body_as_FBS_Router_CreateActiveSpeakerObserverRequest() const {
    return body_type() == FBS::Request::Body::FBS_Router_CreateActiveSpeakerObserverRequest ? static_cast<const FBS::Router::CreateActiveSpeakerObserverRequest *>(body()) : nullptr;
  }
  const FBS::Router::CreateAudioLevelObserverRequest *body_as_FBS_Router_CreateAudioLevelObserverRequest() const {
    return body_type() == FBS::Request::Body::FBS_Router_CreateAudioLevelObserverRequest ? static_cast<const FBS::Router::CreateAudioLevelObserverRequest *>(body()) : nullptr;
  }
  const FBS::Router::CloseTransportRequest *body_as_FBS_Router_CloseTransportRequest() const {
    return body_type() == FBS::Request::Body::FBS_Router_CloseTransportRequest ? static_cast<const FBS::Router::CloseTransportRequest *>(body()) : nullptr;
  }
  const FBS::Router::CloseRtpObserverRequest *body_as_FBS_Router_CloseRtpObserverRequest() const {
    return body_type() == FBS::Request::Body::FBS_Router_CloseRtpObserverRequest ? static_cast<const FBS::Router::CloseRtpObserverRequest *>(body()) : nullptr;
  }
  const FBS::Transport::SetMaxIncomingBitrateRequest *body_as_FBS_Transport_SetMaxIncomingBitrateRequest() const {
    return body_type() == FBS::Request::Body::FBS_Transport_SetMaxIncomingBitrateRequest ? static_cast<const FBS::Transport::SetMaxIncomingBitrateRequest *>(body()) : nullptr;
  }
  const FBS::Transport::SetMaxOutgoingBitrateRequest *body_as_FBS_Transport_SetMaxOutgoingBitrateRequest() const {
    return body_type() == FBS::Request::Body::FBS_Transport_SetMaxOutgoingBitrateRequest ? static_cast<const FBS::Transport::SetMaxOutgoingBitrateRequest *>(body()) : nullptr;
  }
  const FBS::Transport::SetMinOutgoingBitrateRequest *body_as_FBS_Transport_SetMinOutgoingBitrateRequest() const {
    return body_type() == FBS::Request::Body::FBS_Transport_SetMinOutgoingBitrateRequest ? static_cast<const FBS::Transport::SetMinOutgoingBitrateRequest *>(body()) : nullptr;
  }
  const FBS::Transport::ProduceRequest *body_as_FBS_Transport_ProduceRequest() const {
    return body_type() == FBS::Request::Body::FBS_Transport_ProduceRequest ? static_cast<const FBS::Transport::ProduceRequest *>(body()) : nullptr;
  }
  const FBS::Transport::ConsumeRequest *body_as_FBS_Transport_ConsumeRequest() const {
    return body_type() == FBS::Request::Body::FBS_Transport_ConsumeRequest ? static_cast<const FBS::Transport::ConsumeRequest *>(body()) : nullptr;
  }
  const FBS::Transport::ProduceDataRequest *body_as_FBS_Transport_ProduceDataRequest() const {
    return body_type() == FBS::Request::Body::FBS_Transport_ProduceDataRequest ? static_cast<const FBS::Transport::ProduceDataRequest *>(body()) : nullptr;
  }
  const FBS::Transport::ConsumeDataRequest *body_as_FBS_Transport_ConsumeDataRequest() const {
    return body_type() == FBS::Request::Body::FBS_Transport_ConsumeDataRequest ? static_cast<const FBS::Transport::ConsumeDataRequest *>(body()) : nullptr;
  }
  const FBS::Transport::EnableTraceEventRequest *body_as_FBS_Transport_EnableTraceEventRequest() const {
    return body_type() == FBS::Request::Body::FBS_Transport_EnableTraceEventRequest ? static_cast<const FBS::Transport::EnableTraceEventRequest *>(body()) : nullptr;
  }
  const FBS::Transport::CloseProducerRequest *body_as_FBS_Transport_CloseProducerRequest() const {
    return body_type() == FBS::Request::Body::FBS_Transport_CloseProducerRequest ? static_cast<const FBS::Transport::CloseProducerRequest *>(body()) : nullptr;
  }
  const FBS::Transport::CloseConsumerRequest *body_as_FBS_Transport_CloseConsumerRequest() const {
    return body_type() == FBS::Request::Body::FBS_Transport_CloseConsumerRequest ? static_cast<const FBS::Transport::CloseConsumerRequest *>(body()) : nullptr;
  }
  const FBS::Transport::CloseDataProducerRequest *body_as_FBS_Transport_CloseDataProducerRequest() const {
    return body_type() == FBS::Request::Body::FBS_Transport_CloseDataProducerRequest ? static_cast<const FBS::Transport::CloseDataProducerRequest *>(body()) : nullptr;
  }
  const FBS::Transport::CloseDataConsumerRequest *body_as_FBS_Transport_CloseDataConsumerRequest() const {
    return body_type() == FBS::Request::Body::FBS_Transport_CloseDataConsumerRequest ? static_cast<const FBS::Transport::CloseDataConsumerRequest *>(body()) : nullptr;
  }
  const FBS::PlainTransport::ConnectRequest *body_as_PlainTransport_ConnectRequest() const {
    return body_type() == FBS::Request::Body::PlainTransport_ConnectRequest ? static_cast<const FBS::PlainTransport::ConnectRequest *>(body()) : nullptr;
  }
  const FBS::PipeTransport::ConnectRequest *body_as_PipeTransport_ConnectRequest() const {
    return body_type() == FBS::Request::Body::PipeTransport_ConnectRequest ? static_cast<const FBS::PipeTransport::ConnectRequest *>(body()) : nullptr;
  }
  const FBS::WebRtcTransport::ConnectRequest *body_as_FBS_WebRtcTransport_ConnectRequest() const {
    return body_type() == FBS::Request::Body::FBS_WebRtcTransport_ConnectRequest ? static_cast<const FBS::WebRtcTransport::ConnectRequest *>(body()) : nullptr;
  }
  const FBS::Producer::EnableTraceEventRequest *body_as_FBS_Producer_EnableTraceEventRequest() const {
    return body_type() == FBS::Request::Body::FBS_Producer_EnableTraceEventRequest ? static_cast<const FBS::Producer::EnableTraceEventRequest *>(body()) : nullptr;
  }
  const FBS::Consumer::SetPreferredLayersRequest *body_as_FBS_Consumer_SetPreferredLayersRequest() const {
    return body_type() == FBS::Request::Body::FBS_Consumer_SetPreferredLayersRequest ? static_cast<const FBS::Consumer::SetPreferredLayersRequest *>(body()) : nullptr;
  }
  const FBS::Consumer::SetPriorityRequest *body_as_FBS_Consumer_SetPriorityRequest() const {
    return body_type() == FBS::Request::Body::FBS_Consumer_SetPriorityRequest ? static_cast<const FBS::Consumer::SetPriorityRequest *>(body()) : nullptr;
  }
  const FBS::Consumer::EnableTraceEventRequest *body_as_FBS_Consumer_EnableTraceEventRequest() const {
    return body_type() == FBS::Request::Body::FBS_Consumer_EnableTraceEventRequest ? static_cast<const FBS::Consumer::EnableTraceEventRequest *>(body()) : nullptr;
  }
  const FBS::DataConsumer::SetBufferedAmountLowThresholdRequest *body_as_FBS_DataConsumer_SetBufferedAmountLowThresholdRequest() const {
    return body_type() == FBS::Request::Body::FBS_DataConsumer_SetBufferedAmountLowThresholdRequest ? static_cast<const FBS::DataConsumer::SetBufferedAmountLowThresholdRequest *>(body()) : nullptr;
  }
  const FBS::DataConsumer::SendRequest *body_as_FBS_DataConsumer_SendRequest() const {
    return body_type() == FBS::Request::Body::FBS_DataConsumer_SendRequest ? static_cast<const FBS::DataConsumer::SendRequest *>(body()) : nullptr;
  }
  const FBS::DataConsumer::SetSubchannelsRequest *body_as_FBS_DataConsumer_SetSubchannelsRequest() const {
    return body_type() == FBS::Request::Body::FBS_DataConsumer_SetSubchannelsRequest ? static_cast<const FBS::DataConsumer::SetSubchannelsRequest *>(body()) : nullptr;
  }
  const FBS::RtpObserver::AddProducerRequest *body_as_FBS_RtpObserver_AddProducerRequest() const {
    return body_type() == FBS::Request::Body::FBS_RtpObserver_AddProducerRequest ? static_cast<const FBS::RtpObserver::AddProducerRequest *>(body()) : nullptr;
  }
  const FBS::RtpObserver::RemoveProducerRequest *body_as_FBS_RtpObserver_RemoveProducerRequest() const {
    return body_type() == FBS::Request::Body::FBS_RtpObserver_RemoveProducerRequest ? static_cast<const FBS::RtpObserver::RemoveProducerRequest *>(body()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_METHOD, 1) &&
           VerifyOffsetRequired(verifier, VT_HANDLERID) &&
           verifier.VerifyString(handlerId()) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyBody(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const FBS::Worker::UpdateSettingsRequest *Request::body_as<FBS::Worker::UpdateSettingsRequest>() const {
  return body_as_FBS_Worker_UpdateSettingsRequest();
}

template<> inline const FBS::Worker::CreateWebRtcServerRequest *Request::body_as<FBS::Worker::CreateWebRtcServerRequest>() const {
  return body_as_FBS_Worker_CreateWebRtcServerRequest();
}

template<> inline const FBS::Worker::CloseWebRtcServerRequest *Request::body_as<FBS::Worker::CloseWebRtcServerRequest>() const {
  return body_as_FBS_Worker_CloseWebRtcServerRequest();
}

template<> inline const FBS::Worker::CreateRouterRequest *Request::body_as<FBS::Worker::CreateRouterRequest>() const {
  return body_as_FBS_Worker_CreateRouterRequest();
}

template<> inline const FBS::Worker::CloseRouterRequest *Request::body_as<FBS::Worker::CloseRouterRequest>() const {
  return body_as_FBS_Worker_CloseRouterRequest();
}

template<> inline const FBS::Router::CreateWebRtcTransportRequest *Request::body_as<FBS::Router::CreateWebRtcTransportRequest>() const {
  return body_as_FBS_Router_CreateWebRtcTransportRequest();
}

template<> inline const FBS::Router::CreatePlainTransportRequest *Request::body_as<FBS::Router::CreatePlainTransportRequest>() const {
  return body_as_FBS_Router_CreatePlainTransportRequest();
}

template<> inline const FBS::Router::CreatePipeTransportRequest *Request::body_as<FBS::Router::CreatePipeTransportRequest>() const {
  return body_as_FBS_Router_CreatePipeTransportRequest();
}

template<> inline const FBS::Router::CreateDirectTransportRequest *Request::body_as<FBS::Router::CreateDirectTransportRequest>() const {
  return body_as_FBS_Router_CreateDirectTransportRequest();
}

template<> inline const FBS::Router::CreateActiveSpeakerObserverRequest *Request::body_as<FBS::Router::CreateActiveSpeakerObserverRequest>() const {
  return body_as_FBS_Router_CreateActiveSpeakerObserverRequest();
}

template<> inline const FBS::Router::CreateAudioLevelObserverRequest *Request::body_as<FBS::Router::CreateAudioLevelObserverRequest>() const {
  return body_as_FBS_Router_CreateAudioLevelObserverRequest();
}

template<> inline const FBS::Router::CloseTransportRequest *Request::body_as<FBS::Router::CloseTransportRequest>() const {
  return body_as_FBS_Router_CloseTransportRequest();
}

template<> inline const FBS::Router::CloseRtpObserverRequest *Request::body_as<FBS::Router::CloseRtpObserverRequest>() const {
  return body_as_FBS_Router_CloseRtpObserverRequest();
}

template<> inline const FBS::Transport::SetMaxIncomingBitrateRequest *Request::body_as<FBS::Transport::SetMaxIncomingBitrateRequest>() const {
  return body_as_FBS_Transport_SetMaxIncomingBitrateRequest();
}

template<> inline const FBS::Transport::SetMaxOutgoingBitrateRequest *Request::body_as<FBS::Transport::SetMaxOutgoingBitrateRequest>() const {
  return body_as_FBS_Transport_SetMaxOutgoingBitrateRequest();
}

template<> inline const FBS::Transport::SetMinOutgoingBitrateRequest *Request::body_as<FBS::Transport::SetMinOutgoingBitrateRequest>() const {
  return body_as_FBS_Transport_SetMinOutgoingBitrateRequest();
}

template<> inline const FBS::Transport::ProduceRequest *Request::body_as<FBS::Transport::ProduceRequest>() const {
  return body_as_FBS_Transport_ProduceRequest();
}

template<> inline const FBS::Transport::ConsumeRequest *Request::body_as<FBS::Transport::ConsumeRequest>() const {
  return body_as_FBS_Transport_ConsumeRequest();
}

template<> inline const FBS::Transport::ProduceDataRequest *Request::body_as<FBS::Transport::ProduceDataRequest>() const {
  return body_as_FBS_Transport_ProduceDataRequest();
}

template<> inline const FBS::Transport::ConsumeDataRequest *Request::body_as<FBS::Transport::ConsumeDataRequest>() const {
  return body_as_FBS_Transport_ConsumeDataRequest();
}

template<> inline const FBS::Transport::EnableTraceEventRequest *Request::body_as<FBS::Transport::EnableTraceEventRequest>() const {
  return body_as_FBS_Transport_EnableTraceEventRequest();
}

template<> inline const FBS::Transport::CloseProducerRequest *Request::body_as<FBS::Transport::CloseProducerRequest>() const {
  return body_as_FBS_Transport_CloseProducerRequest();
}

template<> inline const FBS::Transport::CloseConsumerRequest *Request::body_as<FBS::Transport::CloseConsumerRequest>() const {
  return body_as_FBS_Transport_CloseConsumerRequest();
}

template<> inline const FBS::Transport::CloseDataProducerRequest *Request::body_as<FBS::Transport::CloseDataProducerRequest>() const {
  return body_as_FBS_Transport_CloseDataProducerRequest();
}

template<> inline const FBS::Transport::CloseDataConsumerRequest *Request::body_as<FBS::Transport::CloseDataConsumerRequest>() const {
  return body_as_FBS_Transport_CloseDataConsumerRequest();
}

template<> inline const FBS::PlainTransport::ConnectRequest *Request::body_as<FBS::PlainTransport::ConnectRequest>() const {
  return body_as_PlainTransport_ConnectRequest();
}

template<> inline const FBS::PipeTransport::ConnectRequest *Request::body_as<FBS::PipeTransport::ConnectRequest>() const {
  return body_as_PipeTransport_ConnectRequest();
}

template<> inline const FBS::WebRtcTransport::ConnectRequest *Request::body_as<FBS::WebRtcTransport::ConnectRequest>() const {
  return body_as_FBS_WebRtcTransport_ConnectRequest();
}

template<> inline const FBS::Producer::EnableTraceEventRequest *Request::body_as<FBS::Producer::EnableTraceEventRequest>() const {
  return body_as_FBS_Producer_EnableTraceEventRequest();
}

template<> inline const FBS::Consumer::SetPreferredLayersRequest *Request::body_as<FBS::Consumer::SetPreferredLayersRequest>() const {
  return body_as_FBS_Consumer_SetPreferredLayersRequest();
}

template<> inline const FBS::Consumer::SetPriorityRequest *Request::body_as<FBS::Consumer::SetPriorityRequest>() const {
  return body_as_FBS_Consumer_SetPriorityRequest();
}

template<> inline const FBS::Consumer::EnableTraceEventRequest *Request::body_as<FBS::Consumer::EnableTraceEventRequest>() const {
  return body_as_FBS_Consumer_EnableTraceEventRequest();
}

template<> inline const FBS::DataConsumer::SetBufferedAmountLowThresholdRequest *Request::body_as<FBS::DataConsumer::SetBufferedAmountLowThresholdRequest>() const {
  return body_as_FBS_DataConsumer_SetBufferedAmountLowThresholdRequest();
}

template<> inline const FBS::DataConsumer::SendRequest *Request::body_as<FBS::DataConsumer::SendRequest>() const {
  return body_as_FBS_DataConsumer_SendRequest();
}

template<> inline const FBS::DataConsumer::SetSubchannelsRequest *Request::body_as<FBS::DataConsumer::SetSubchannelsRequest>() const {
  return body_as_FBS_DataConsumer_SetSubchannelsRequest();
}

template<> inline const FBS::RtpObserver::AddProducerRequest *Request::body_as<FBS::RtpObserver::AddProducerRequest>() const {
  return body_as_FBS_RtpObserver_AddProducerRequest();
}

template<> inline const FBS::RtpObserver::RemoveProducerRequest *Request::body_as<FBS::RtpObserver::RemoveProducerRequest>() const {
  return body_as_FBS_RtpObserver_RemoveProducerRequest();
}

struct RequestBuilder {
  typedef Request Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Request::VT_ID, id, 0);
  }
  void add_method(FBS::Request::Method method) {
    fbb_.AddElement<uint8_t>(Request::VT_METHOD, static_cast<uint8_t>(method), 0);
  }
  void add_handlerId(::flatbuffers::Offset<::flatbuffers::String> handlerId) {
    fbb_.AddOffset(Request::VT_HANDLERID, handlerId);
  }
  void add_body_type(FBS::Request::Body body_type) {
    fbb_.AddElement<uint8_t>(Request::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(::flatbuffers::Offset<void> body) {
    fbb_.AddOffset(Request::VT_BODY, body);
  }
  explicit RequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Request>(end);
    fbb_.Required(o, Request::VT_HANDLERID);
    return o;
  }
};

inline ::flatbuffers::Offset<Request> CreateRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    FBS::Request::Method method = FBS::Request::Method::WORKER_CLOSE,
    ::flatbuffers::Offset<::flatbuffers::String> handlerId = 0,
    FBS::Request::Body body_type = FBS::Request::Body::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_handlerId(handlerId);
  builder_.add_id(id);
  builder_.add_body_type(body_type);
  builder_.add_method(method);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Request> CreateRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    FBS::Request::Method method = FBS::Request::Method::WORKER_CLOSE,
    const char *handlerId = nullptr,
    FBS::Request::Body body_type = FBS::Request::Body::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  auto handlerId__ = handlerId ? _fbb.CreateString(handlerId) : 0;
  return FBS::Request::CreateRequest(
      _fbb,
      id,
      method,
      handlerId__,
      body_type,
      body);
}

inline bool VerifyBody(::flatbuffers::Verifier &verifier, const void *obj, Body type) {
  switch (type) {
    case Body::NONE: {
      return true;
    }
    case Body::FBS_Worker_UpdateSettingsRequest: {
      auto ptr = reinterpret_cast<const FBS::Worker::UpdateSettingsRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Worker_CreateWebRtcServerRequest: {
      auto ptr = reinterpret_cast<const FBS::Worker::CreateWebRtcServerRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Worker_CloseWebRtcServerRequest: {
      auto ptr = reinterpret_cast<const FBS::Worker::CloseWebRtcServerRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Worker_CreateRouterRequest: {
      auto ptr = reinterpret_cast<const FBS::Worker::CreateRouterRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Worker_CloseRouterRequest: {
      auto ptr = reinterpret_cast<const FBS::Worker::CloseRouterRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Router_CreateWebRtcTransportRequest: {
      auto ptr = reinterpret_cast<const FBS::Router::CreateWebRtcTransportRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Router_CreatePlainTransportRequest: {
      auto ptr = reinterpret_cast<const FBS::Router::CreatePlainTransportRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Router_CreatePipeTransportRequest: {
      auto ptr = reinterpret_cast<const FBS::Router::CreatePipeTransportRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Router_CreateDirectTransportRequest: {
      auto ptr = reinterpret_cast<const FBS::Router::CreateDirectTransportRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Router_CreateActiveSpeakerObserverRequest: {
      auto ptr = reinterpret_cast<const FBS::Router::CreateActiveSpeakerObserverRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Router_CreateAudioLevelObserverRequest: {
      auto ptr = reinterpret_cast<const FBS::Router::CreateAudioLevelObserverRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Router_CloseTransportRequest: {
      auto ptr = reinterpret_cast<const FBS::Router::CloseTransportRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Router_CloseRtpObserverRequest: {
      auto ptr = reinterpret_cast<const FBS::Router::CloseRtpObserverRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_SetMaxIncomingBitrateRequest: {
      auto ptr = reinterpret_cast<const FBS::Transport::SetMaxIncomingBitrateRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_SetMaxOutgoingBitrateRequest: {
      auto ptr = reinterpret_cast<const FBS::Transport::SetMaxOutgoingBitrateRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_SetMinOutgoingBitrateRequest: {
      auto ptr = reinterpret_cast<const FBS::Transport::SetMinOutgoingBitrateRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_ProduceRequest: {
      auto ptr = reinterpret_cast<const FBS::Transport::ProduceRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_ConsumeRequest: {
      auto ptr = reinterpret_cast<const FBS::Transport::ConsumeRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_ProduceDataRequest: {
      auto ptr = reinterpret_cast<const FBS::Transport::ProduceDataRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_ConsumeDataRequest: {
      auto ptr = reinterpret_cast<const FBS::Transport::ConsumeDataRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_EnableTraceEventRequest: {
      auto ptr = reinterpret_cast<const FBS::Transport::EnableTraceEventRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_CloseProducerRequest: {
      auto ptr = reinterpret_cast<const FBS::Transport::CloseProducerRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_CloseConsumerRequest: {
      auto ptr = reinterpret_cast<const FBS::Transport::CloseConsumerRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_CloseDataProducerRequest: {
      auto ptr = reinterpret_cast<const FBS::Transport::CloseDataProducerRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_CloseDataConsumerRequest: {
      auto ptr = reinterpret_cast<const FBS::Transport::CloseDataConsumerRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::PlainTransport_ConnectRequest: {
      auto ptr = reinterpret_cast<const FBS::PlainTransport::ConnectRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::PipeTransport_ConnectRequest: {
      auto ptr = reinterpret_cast<const FBS::PipeTransport::ConnectRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_WebRtcTransport_ConnectRequest: {
      auto ptr = reinterpret_cast<const FBS::WebRtcTransport::ConnectRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Producer_EnableTraceEventRequest: {
      auto ptr = reinterpret_cast<const FBS::Producer::EnableTraceEventRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Consumer_SetPreferredLayersRequest: {
      auto ptr = reinterpret_cast<const FBS::Consumer::SetPreferredLayersRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Consumer_SetPriorityRequest: {
      auto ptr = reinterpret_cast<const FBS::Consumer::SetPriorityRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Consumer_EnableTraceEventRequest: {
      auto ptr = reinterpret_cast<const FBS::Consumer::EnableTraceEventRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_DataConsumer_SetBufferedAmountLowThresholdRequest: {
      auto ptr = reinterpret_cast<const FBS::DataConsumer::SetBufferedAmountLowThresholdRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_DataConsumer_SendRequest: {
      auto ptr = reinterpret_cast<const FBS::DataConsumer::SendRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_DataConsumer_SetSubchannelsRequest: {
      auto ptr = reinterpret_cast<const FBS::DataConsumer::SetSubchannelsRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_RtpObserver_AddProducerRequest: {
      auto ptr = reinterpret_cast<const FBS::RtpObserver::AddProducerRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_RtpObserver_RemoveProducerRequest: {
      auto ptr = reinterpret_cast<const FBS::RtpObserver::RemoveProducerRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyBodyVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Body> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyBody(
        verifier,  values->Get(i), types->GetEnum<Body>(i))) {
      return false;
    }
  }
  return true;
}

inline const ::flatbuffers::TypeTable *MethodTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Request::MethodTypeTable
  };
  static const char * const names[] = {
    "WORKER_CLOSE",
    "WORKER_DUMP",
    "WORKER_GET_RESOURCE_USAGE",
    "WORKER_UPDATE_SETTINGS",
    "WORKER_CREATE_WEBRTCSERVER",
    "WORKER_CREATE_ROUTER",
    "WORKER_WEBRTCSERVER_CLOSE",
    "WORKER_CLOSE_ROUTER",
    "WEBRTCSERVER_DUMP",
    "ROUTER_DUMP",
    "ROUTER_CREATE_WEBRTCTRANSPORT",
    "ROUTER_CREATE_WEBRTCTRANSPORT_WITH_SERVER",
    "ROUTER_CREATE_PLAINTRANSPORT",
    "ROUTER_CREATE_PIPETRANSPORT",
    "ROUTER_CREATE_DIRECTTRANSPORT",
    "ROUTER_CLOSE_TRANSPORT",
    "ROUTER_CREATE_ACTIVESPEAKEROBSERVER",
    "ROUTER_CREATE_AUDIOLEVELOBSERVER",
    "ROUTER_CLOSE_RTPOBSERVER",
    "TRANSPORT_DUMP",
    "TRANSPORT_GET_STATS",
    "TRANSPORT_CONNECT",
    "TRANSPORT_SET_MAX_INCOMING_BITRATE",
    "TRANSPORT_SET_MAX_OUTGOING_BITRATE",
    "TRANSPORT_SET_MIN_OUTGOING_BITRATE",
    "TRANSPORT_RESTART_ICE",
    "TRANSPORT_PRODUCE",
    "TRANSPORT_PRODUCE_DATA",
    "TRANSPORT_CONSUME",
    "TRANSPORT_CONSUME_DATA",
    "TRANSPORT_ENABLE_TRACE_EVENT",
    "TRANSPORT_CLOSE_PRODUCER",
    "TRANSPORT_CLOSE_CONSUMER",
    "TRANSPORT_CLOSE_DATAPRODUCER",
    "TRANSPORT_CLOSE_DATACONSUMER",
    "PLAINTRANSPORT_CONNECT",
    "PIPETRANSPORT_CONNECT",
    "WEBRTCTRANSPORT_CONNECT",
    "PRODUCER_DUMP",
    "PRODUCER_GET_STATS",
    "PRODUCER_PAUSE",
    "PRODUCER_RESUME",
    "PRODUCER_ENABLE_TRACE_EVENT",
    "CONSUMER_DUMP",
    "CONSUMER_GET_STATS",
    "CONSUMER_PAUSE",
    "CONSUMER_RESUME",
    "CONSUMER_SET_PREFERRED_LAYERS",
    "CONSUMER_SET_PRIORITY",
    "CONSUMER_REQUEST_KEY_FRAME",
    "CONSUMER_ENABLE_TRACE_EVENT",
    "DATAPRODUCER_DUMP",
    "DATAPRODUCER_GET_STATS",
    "DATAPRODUCER_PAUSE",
    "DATAPRODUCER_RESUME",
    "DATACONSUMER_DUMP",
    "DATACONSUMER_GET_STATS",
    "DATACONSUMER_PAUSE",
    "DATACONSUMER_RESUME",
    "DATACONSUMER_GET_BUFFERED_AMOUNT",
    "DATACONSUMER_SET_BUFFERED_AMOUNT_LOW_THRESHOLD",
    "DATACONSUMER_SEND",
    "DATACONSUMER_SET_SUBCHANNELS",
    "RTPOBSERVER_PAUSE",
    "RTPOBSERVER_RESUME",
    "RTPOBSERVER_ADD_PRODUCER",
    "RTPOBSERVER_REMOVE_PRODUCER"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 67, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *BodyTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 },
    { ::flatbuffers::ET_SEQUENCE, 0, 3 },
    { ::flatbuffers::ET_SEQUENCE, 0, 4 },
    { ::flatbuffers::ET_SEQUENCE, 0, 5 },
    { ::flatbuffers::ET_SEQUENCE, 0, 6 },
    { ::flatbuffers::ET_SEQUENCE, 0, 7 },
    { ::flatbuffers::ET_SEQUENCE, 0, 8 },
    { ::flatbuffers::ET_SEQUENCE, 0, 9 },
    { ::flatbuffers::ET_SEQUENCE, 0, 10 },
    { ::flatbuffers::ET_SEQUENCE, 0, 11 },
    { ::flatbuffers::ET_SEQUENCE, 0, 12 },
    { ::flatbuffers::ET_SEQUENCE, 0, 13 },
    { ::flatbuffers::ET_SEQUENCE, 0, 14 },
    { ::flatbuffers::ET_SEQUENCE, 0, 15 },
    { ::flatbuffers::ET_SEQUENCE, 0, 16 },
    { ::flatbuffers::ET_SEQUENCE, 0, 17 },
    { ::flatbuffers::ET_SEQUENCE, 0, 18 },
    { ::flatbuffers::ET_SEQUENCE, 0, 19 },
    { ::flatbuffers::ET_SEQUENCE, 0, 20 },
    { ::flatbuffers::ET_SEQUENCE, 0, 21 },
    { ::flatbuffers::ET_SEQUENCE, 0, 22 },
    { ::flatbuffers::ET_SEQUENCE, 0, 23 },
    { ::flatbuffers::ET_SEQUENCE, 0, 24 },
    { ::flatbuffers::ET_SEQUENCE, 0, 25 },
    { ::flatbuffers::ET_SEQUENCE, 0, 26 },
    { ::flatbuffers::ET_SEQUENCE, 0, 27 },
    { ::flatbuffers::ET_SEQUENCE, 0, 28 },
    { ::flatbuffers::ET_SEQUENCE, 0, 29 },
    { ::flatbuffers::ET_SEQUENCE, 0, 30 },
    { ::flatbuffers::ET_SEQUENCE, 0, 31 },
    { ::flatbuffers::ET_SEQUENCE, 0, 32 },
    { ::flatbuffers::ET_SEQUENCE, 0, 33 },
    { ::flatbuffers::ET_SEQUENCE, 0, 34 },
    { ::flatbuffers::ET_SEQUENCE, 0, 35 },
    { ::flatbuffers::ET_SEQUENCE, 0, 36 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Worker::UpdateSettingsRequestTypeTable,
    FBS::Worker::CreateWebRtcServerRequestTypeTable,
    FBS::Worker::CloseWebRtcServerRequestTypeTable,
    FBS::Worker::CreateRouterRequestTypeTable,
    FBS::Worker::CloseRouterRequestTypeTable,
    FBS::Router::CreateWebRtcTransportRequestTypeTable,
    FBS::Router::CreatePlainTransportRequestTypeTable,
    FBS::Router::CreatePipeTransportRequestTypeTable,
    FBS::Router::CreateDirectTransportRequestTypeTable,
    FBS::Router::CreateActiveSpeakerObserverRequestTypeTable,
    FBS::Router::CreateAudioLevelObserverRequestTypeTable,
    FBS::Router::CloseTransportRequestTypeTable,
    FBS::Router::CloseRtpObserverRequestTypeTable,
    FBS::Transport::SetMaxIncomingBitrateRequestTypeTable,
    FBS::Transport::SetMaxOutgoingBitrateRequestTypeTable,
    FBS::Transport::SetMinOutgoingBitrateRequestTypeTable,
    FBS::Transport::ProduceRequestTypeTable,
    FBS::Transport::ConsumeRequestTypeTable,
    FBS::Transport::ProduceDataRequestTypeTable,
    FBS::Transport::ConsumeDataRequestTypeTable,
    FBS::Transport::EnableTraceEventRequestTypeTable,
    FBS::Transport::CloseProducerRequestTypeTable,
    FBS::Transport::CloseConsumerRequestTypeTable,
    FBS::Transport::CloseDataProducerRequestTypeTable,
    FBS::Transport::CloseDataConsumerRequestTypeTable,
    FBS::PlainTransport::ConnectRequestTypeTable,
    FBS::PipeTransport::ConnectRequestTypeTable,
    FBS::WebRtcTransport::ConnectRequestTypeTable,
    FBS::Producer::EnableTraceEventRequestTypeTable,
    FBS::Consumer::SetPreferredLayersRequestTypeTable,
    FBS::Consumer::SetPriorityRequestTypeTable,
    FBS::Consumer::EnableTraceEventRequestTypeTable,
    FBS::DataConsumer::SetBufferedAmountLowThresholdRequestTypeTable,
    FBS::DataConsumer::SendRequestTypeTable,
    FBS::DataConsumer::SetSubchannelsRequestTypeTable,
    FBS::RtpObserver::AddProducerRequestTypeTable,
    FBS::RtpObserver::RemoveProducerRequestTypeTable
  };
  static const char * const names[] = {
    "NONE",
    "FBS_Worker_UpdateSettingsRequest",
    "FBS_Worker_CreateWebRtcServerRequest",
    "FBS_Worker_CloseWebRtcServerRequest",
    "FBS_Worker_CreateRouterRequest",
    "FBS_Worker_CloseRouterRequest",
    "FBS_Router_CreateWebRtcTransportRequest",
    "FBS_Router_CreatePlainTransportRequest",
    "FBS_Router_CreatePipeTransportRequest",
    "FBS_Router_CreateDirectTransportRequest",
    "FBS_Router_CreateActiveSpeakerObserverRequest",
    "FBS_Router_CreateAudioLevelObserverRequest",
    "FBS_Router_CloseTransportRequest",
    "FBS_Router_CloseRtpObserverRequest",
    "FBS_Transport_SetMaxIncomingBitrateRequest",
    "FBS_Transport_SetMaxOutgoingBitrateRequest",
    "FBS_Transport_SetMinOutgoingBitrateRequest",
    "FBS_Transport_ProduceRequest",
    "FBS_Transport_ConsumeRequest",
    "FBS_Transport_ProduceDataRequest",
    "FBS_Transport_ConsumeDataRequest",
    "FBS_Transport_EnableTraceEventRequest",
    "FBS_Transport_CloseProducerRequest",
    "FBS_Transport_CloseConsumerRequest",
    "FBS_Transport_CloseDataProducerRequest",
    "FBS_Transport_CloseDataConsumerRequest",
    "PlainTransport_ConnectRequest",
    "PipeTransport_ConnectRequest",
    "FBS_WebRtcTransport_ConnectRequest",
    "FBS_Producer_EnableTraceEventRequest",
    "FBS_Consumer_SetPreferredLayersRequest",
    "FBS_Consumer_SetPriorityRequest",
    "FBS_Consumer_EnableTraceEventRequest",
    "FBS_DataConsumer_SetBufferedAmountLowThresholdRequest",
    "FBS_DataConsumer_SendRequest",
    "FBS_DataConsumer_SetSubchannelsRequest",
    "FBS_RtpObserver_AddProducerRequest",
    "FBS_RtpObserver_RemoveProducerRequest"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_UNION, 38, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *RequestTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UINT, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_UTYPE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Request::MethodTypeTable,
    FBS::Request::BodyTypeTable
  };
  static const char * const names[] = {
    "id",
    "method",
    "handlerId",
    "body_type",
    "body"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const FBS::Request::Request *GetRequest(const void *buf) {
  return ::flatbuffers::GetRoot<FBS::Request::Request>(buf);
}

inline const FBS::Request::Request *GetSizePrefixedRequest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FBS::Request::Request>(buf);
}

inline bool VerifyRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FBS::Request::Request>(nullptr);
}

inline bool VerifySizePrefixedRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FBS::Request::Request>(nullptr);
}

inline void FinishRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FBS::Request::Request> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FBS::Request::Request> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Request
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_REQUEST_FBS_REQUEST_H_
