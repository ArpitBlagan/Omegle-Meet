// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AUDIOLEVELOBSERVER_FBS_AUDIOLEVELOBSERVER_H_
#define FLATBUFFERS_GENERATED_AUDIOLEVELOBSERVER_FBS_AUDIOLEVELOBSERVER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

namespace FBS {
namespace AudioLevelObserver {

struct AudioLevelObserverOptions;
struct AudioLevelObserverOptionsBuilder;

struct Volume;
struct VolumeBuilder;

struct VolumesNotification;
struct VolumesNotificationBuilder;

inline const ::flatbuffers::TypeTable *AudioLevelObserverOptionsTypeTable();

inline const ::flatbuffers::TypeTable *VolumeTypeTable();

inline const ::flatbuffers::TypeTable *VolumesNotificationTypeTable();

struct AudioLevelObserverOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AudioLevelObserverOptionsBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return AudioLevelObserverOptionsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAXENTRIES = 4,
    VT_THRESHOLD = 6,
    VT_INTERVAL = 8
  };
  uint16_t maxEntries() const {
    return GetField<uint16_t>(VT_MAXENTRIES, 0);
  }
  int8_t threshold() const {
    return GetField<int8_t>(VT_THRESHOLD, 0);
  }
  uint16_t interval() const {
    return GetField<uint16_t>(VT_INTERVAL, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_MAXENTRIES, 2) &&
           VerifyField<int8_t>(verifier, VT_THRESHOLD, 1) &&
           VerifyField<uint16_t>(verifier, VT_INTERVAL, 2) &&
           verifier.EndTable();
  }
};

struct AudioLevelObserverOptionsBuilder {
  typedef AudioLevelObserverOptions Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_maxEntries(uint16_t maxEntries) {
    fbb_.AddElement<uint16_t>(AudioLevelObserverOptions::VT_MAXENTRIES, maxEntries, 0);
  }
  void add_threshold(int8_t threshold) {
    fbb_.AddElement<int8_t>(AudioLevelObserverOptions::VT_THRESHOLD, threshold, 0);
  }
  void add_interval(uint16_t interval) {
    fbb_.AddElement<uint16_t>(AudioLevelObserverOptions::VT_INTERVAL, interval, 0);
  }
  explicit AudioLevelObserverOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AudioLevelObserverOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AudioLevelObserverOptions>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AudioLevelObserverOptions> CreateAudioLevelObserverOptions(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t maxEntries = 0,
    int8_t threshold = 0,
    uint16_t interval = 0) {
  AudioLevelObserverOptionsBuilder builder_(_fbb);
  builder_.add_interval(interval);
  builder_.add_maxEntries(maxEntries);
  builder_.add_threshold(threshold);
  return builder_.Finish();
}

struct Volume FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VolumeBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return VolumeTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRODUCERID = 4,
    VT_VOLUME = 6
  };
  const ::flatbuffers::String *producerId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRODUCERID);
  }
  int8_t volume() const {
    return GetField<int8_t>(VT_VOLUME, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_PRODUCERID) &&
           verifier.VerifyString(producerId()) &&
           VerifyField<int8_t>(verifier, VT_VOLUME, 1) &&
           verifier.EndTable();
  }
};

struct VolumeBuilder {
  typedef Volume Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_producerId(::flatbuffers::Offset<::flatbuffers::String> producerId) {
    fbb_.AddOffset(Volume::VT_PRODUCERID, producerId);
  }
  void add_volume(int8_t volume) {
    fbb_.AddElement<int8_t>(Volume::VT_VOLUME, volume, 0);
  }
  explicit VolumeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Volume> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Volume>(end);
    fbb_.Required(o, Volume::VT_PRODUCERID);
    return o;
  }
};

inline ::flatbuffers::Offset<Volume> CreateVolume(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> producerId = 0,
    int8_t volume = 0) {
  VolumeBuilder builder_(_fbb);
  builder_.add_producerId(producerId);
  builder_.add_volume(volume);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Volume> CreateVolumeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *producerId = nullptr,
    int8_t volume = 0) {
  auto producerId__ = producerId ? _fbb.CreateString(producerId) : 0;
  return FBS::AudioLevelObserver::CreateVolume(
      _fbb,
      producerId__,
      volume);
}

struct VolumesNotification FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VolumesNotificationBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return VolumesNotificationTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VOLUMES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<FBS::AudioLevelObserver::Volume>> *volumes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FBS::AudioLevelObserver::Volume>> *>(VT_VOLUMES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VOLUMES) &&
           verifier.VerifyVector(volumes()) &&
           verifier.VerifyVectorOfTables(volumes()) &&
           verifier.EndTable();
  }
};

struct VolumesNotificationBuilder {
  typedef VolumesNotification Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_volumes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBS::AudioLevelObserver::Volume>>> volumes) {
    fbb_.AddOffset(VolumesNotification::VT_VOLUMES, volumes);
  }
  explicit VolumesNotificationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<VolumesNotification> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<VolumesNotification>(end);
    fbb_.Required(o, VolumesNotification::VT_VOLUMES);
    return o;
  }
};

inline ::flatbuffers::Offset<VolumesNotification> CreateVolumesNotification(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBS::AudioLevelObserver::Volume>>> volumes = 0) {
  VolumesNotificationBuilder builder_(_fbb);
  builder_.add_volumes(volumes);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<VolumesNotification> CreateVolumesNotificationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<FBS::AudioLevelObserver::Volume>> *volumes = nullptr) {
  auto volumes__ = volumes ? _fbb.CreateVector<::flatbuffers::Offset<FBS::AudioLevelObserver::Volume>>(*volumes) : 0;
  return FBS::AudioLevelObserver::CreateVolumesNotification(
      _fbb,
      volumes__);
}

inline const ::flatbuffers::TypeTable *AudioLevelObserverOptionsTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_USHORT, 0, -1 },
    { ::flatbuffers::ET_CHAR, 0, -1 },
    { ::flatbuffers::ET_USHORT, 0, -1 }
  };
  static const char * const names[] = {
    "maxEntries",
    "threshold",
    "interval"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *VolumeTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_CHAR, 0, -1 }
  };
  static const char * const names[] = {
    "producerId",
    "volume"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *VolumesNotificationTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::AudioLevelObserver::VolumeTypeTable
  };
  static const char * const names[] = {
    "volumes"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace AudioLevelObserver
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_AUDIOLEVELOBSERVER_FBS_AUDIOLEVELOBSERVER_H_
