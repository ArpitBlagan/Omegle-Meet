// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PIPETRANSPORT_FBS_PIPETRANSPORT_H_
#define FLATBUFFERS_GENERATED_PIPETRANSPORT_FBS_PIPETRANSPORT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

#include "transport_generated.h"

namespace FBS {
namespace PipeTransport {

struct PipeTransportOptions;
struct PipeTransportOptionsBuilder;

struct ConnectRequest;
struct ConnectRequestBuilder;

struct ConnectResponse;
struct ConnectResponseBuilder;

struct DumpResponse;
struct DumpResponseBuilder;

struct GetStatsResponse;
struct GetStatsResponseBuilder;

inline const ::flatbuffers::TypeTable *PipeTransportOptionsTypeTable();

inline const ::flatbuffers::TypeTable *ConnectRequestTypeTable();

inline const ::flatbuffers::TypeTable *ConnectResponseTypeTable();

inline const ::flatbuffers::TypeTable *DumpResponseTypeTable();

inline const ::flatbuffers::TypeTable *GetStatsResponseTypeTable();

struct PipeTransportOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PipeTransportOptionsBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PipeTransportOptionsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4,
    VT_LISTENINFO = 6,
    VT_ENABLERTX = 8,
    VT_ENABLESRTP = 10
  };
  const FBS::Transport::Options *base() const {
    return GetPointer<const FBS::Transport::Options *>(VT_BASE);
  }
  const FBS::Transport::ListenInfo *listenInfo() const {
    return GetPointer<const FBS::Transport::ListenInfo *>(VT_LISTENINFO);
  }
  bool enableRtx() const {
    return GetField<uint8_t>(VT_ENABLERTX, 0) != 0;
  }
  bool enableSrtp() const {
    return GetField<uint8_t>(VT_ENABLESRTP, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           VerifyOffsetRequired(verifier, VT_LISTENINFO) &&
           verifier.VerifyTable(listenInfo()) &&
           VerifyField<uint8_t>(verifier, VT_ENABLERTX, 1) &&
           VerifyField<uint8_t>(verifier, VT_ENABLESRTP, 1) &&
           verifier.EndTable();
  }
};

struct PipeTransportOptionsBuilder {
  typedef PipeTransportOptions Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base(::flatbuffers::Offset<FBS::Transport::Options> base) {
    fbb_.AddOffset(PipeTransportOptions::VT_BASE, base);
  }
  void add_listenInfo(::flatbuffers::Offset<FBS::Transport::ListenInfo> listenInfo) {
    fbb_.AddOffset(PipeTransportOptions::VT_LISTENINFO, listenInfo);
  }
  void add_enableRtx(bool enableRtx) {
    fbb_.AddElement<uint8_t>(PipeTransportOptions::VT_ENABLERTX, static_cast<uint8_t>(enableRtx), 0);
  }
  void add_enableSrtp(bool enableSrtp) {
    fbb_.AddElement<uint8_t>(PipeTransportOptions::VT_ENABLESRTP, static_cast<uint8_t>(enableSrtp), 0);
  }
  explicit PipeTransportOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PipeTransportOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PipeTransportOptions>(end);
    fbb_.Required(o, PipeTransportOptions::VT_BASE);
    fbb_.Required(o, PipeTransportOptions::VT_LISTENINFO);
    return o;
  }
};

inline ::flatbuffers::Offset<PipeTransportOptions> CreatePipeTransportOptions(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBS::Transport::Options> base = 0,
    ::flatbuffers::Offset<FBS::Transport::ListenInfo> listenInfo = 0,
    bool enableRtx = false,
    bool enableSrtp = false) {
  PipeTransportOptionsBuilder builder_(_fbb);
  builder_.add_listenInfo(listenInfo);
  builder_.add_base(base);
  builder_.add_enableSrtp(enableSrtp);
  builder_.add_enableRtx(enableRtx);
  return builder_.Finish();
}

struct ConnectRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConnectRequestBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ConnectRequestTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IP = 4,
    VT_PORT = 6,
    VT_SRTPPARAMETERS = 8
  };
  const ::flatbuffers::String *ip() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IP);
  }
  ::flatbuffers::Optional<uint16_t> port() const {
    return GetOptional<uint16_t, uint16_t>(VT_PORT);
  }
  const FBS::Transport::SrtpParameters *srtpParameters() const {
    return GetPointer<const FBS::Transport::SrtpParameters *>(VT_SRTPPARAMETERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_IP) &&
           verifier.VerifyString(ip()) &&
           VerifyField<uint16_t>(verifier, VT_PORT, 2) &&
           VerifyOffset(verifier, VT_SRTPPARAMETERS) &&
           verifier.VerifyTable(srtpParameters()) &&
           verifier.EndTable();
  }
};

struct ConnectRequestBuilder {
  typedef ConnectRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ip(::flatbuffers::Offset<::flatbuffers::String> ip) {
    fbb_.AddOffset(ConnectRequest::VT_IP, ip);
  }
  void add_port(uint16_t port) {
    fbb_.AddElement<uint16_t>(ConnectRequest::VT_PORT, port);
  }
  void add_srtpParameters(::flatbuffers::Offset<FBS::Transport::SrtpParameters> srtpParameters) {
    fbb_.AddOffset(ConnectRequest::VT_SRTPPARAMETERS, srtpParameters);
  }
  explicit ConnectRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ConnectRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ConnectRequest>(end);
    fbb_.Required(o, ConnectRequest::VT_IP);
    return o;
  }
};

inline ::flatbuffers::Offset<ConnectRequest> CreateConnectRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> ip = 0,
    ::flatbuffers::Optional<uint16_t> port = ::flatbuffers::nullopt,
    ::flatbuffers::Offset<FBS::Transport::SrtpParameters> srtpParameters = 0) {
  ConnectRequestBuilder builder_(_fbb);
  builder_.add_srtpParameters(srtpParameters);
  builder_.add_ip(ip);
  if(port) { builder_.add_port(*port); }
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ConnectRequest> CreateConnectRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *ip = nullptr,
    ::flatbuffers::Optional<uint16_t> port = ::flatbuffers::nullopt,
    ::flatbuffers::Offset<FBS::Transport::SrtpParameters> srtpParameters = 0) {
  auto ip__ = ip ? _fbb.CreateString(ip) : 0;
  return FBS::PipeTransport::CreateConnectRequest(
      _fbb,
      ip__,
      port,
      srtpParameters);
}

struct ConnectResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConnectResponseBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ConnectResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TUPLE = 4
  };
  const FBS::Transport::Tuple *tuple() const {
    return GetPointer<const FBS::Transport::Tuple *>(VT_TUPLE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TUPLE) &&
           verifier.VerifyTable(tuple()) &&
           verifier.EndTable();
  }
};

struct ConnectResponseBuilder {
  typedef ConnectResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_tuple(::flatbuffers::Offset<FBS::Transport::Tuple> tuple) {
    fbb_.AddOffset(ConnectResponse::VT_TUPLE, tuple);
  }
  explicit ConnectResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ConnectResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ConnectResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ConnectResponse> CreateConnectResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBS::Transport::Tuple> tuple = 0) {
  ConnectResponseBuilder builder_(_fbb);
  builder_.add_tuple(tuple);
  return builder_.Finish();
}

struct DumpResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DumpResponseBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DumpResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4,
    VT_TUPLE = 6,
    VT_RTX = 8,
    VT_SRTPPARAMETERS = 10
  };
  const FBS::Transport::Dump *base() const {
    return GetPointer<const FBS::Transport::Dump *>(VT_BASE);
  }
  const FBS::Transport::Tuple *tuple() const {
    return GetPointer<const FBS::Transport::Tuple *>(VT_TUPLE);
  }
  bool rtx() const {
    return GetField<uint8_t>(VT_RTX, 0) != 0;
  }
  const FBS::Transport::SrtpParameters *srtpParameters() const {
    return GetPointer<const FBS::Transport::SrtpParameters *>(VT_SRTPPARAMETERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           VerifyOffsetRequired(verifier, VT_TUPLE) &&
           verifier.VerifyTable(tuple()) &&
           VerifyField<uint8_t>(verifier, VT_RTX, 1) &&
           VerifyOffset(verifier, VT_SRTPPARAMETERS) &&
           verifier.VerifyTable(srtpParameters()) &&
           verifier.EndTable();
  }
};

struct DumpResponseBuilder {
  typedef DumpResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base(::flatbuffers::Offset<FBS::Transport::Dump> base) {
    fbb_.AddOffset(DumpResponse::VT_BASE, base);
  }
  void add_tuple(::flatbuffers::Offset<FBS::Transport::Tuple> tuple) {
    fbb_.AddOffset(DumpResponse::VT_TUPLE, tuple);
  }
  void add_rtx(bool rtx) {
    fbb_.AddElement<uint8_t>(DumpResponse::VT_RTX, static_cast<uint8_t>(rtx), 0);
  }
  void add_srtpParameters(::flatbuffers::Offset<FBS::Transport::SrtpParameters> srtpParameters) {
    fbb_.AddOffset(DumpResponse::VT_SRTPPARAMETERS, srtpParameters);
  }
  explicit DumpResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DumpResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DumpResponse>(end);
    fbb_.Required(o, DumpResponse::VT_BASE);
    fbb_.Required(o, DumpResponse::VT_TUPLE);
    return o;
  }
};

inline ::flatbuffers::Offset<DumpResponse> CreateDumpResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBS::Transport::Dump> base = 0,
    ::flatbuffers::Offset<FBS::Transport::Tuple> tuple = 0,
    bool rtx = false,
    ::flatbuffers::Offset<FBS::Transport::SrtpParameters> srtpParameters = 0) {
  DumpResponseBuilder builder_(_fbb);
  builder_.add_srtpParameters(srtpParameters);
  builder_.add_tuple(tuple);
  builder_.add_base(base);
  builder_.add_rtx(rtx);
  return builder_.Finish();
}

struct GetStatsResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GetStatsResponseBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return GetStatsResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4,
    VT_TUPLE = 6
  };
  const FBS::Transport::Stats *base() const {
    return GetPointer<const FBS::Transport::Stats *>(VT_BASE);
  }
  const FBS::Transport::Tuple *tuple() const {
    return GetPointer<const FBS::Transport::Tuple *>(VT_TUPLE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           VerifyOffsetRequired(verifier, VT_TUPLE) &&
           verifier.VerifyTable(tuple()) &&
           verifier.EndTable();
  }
};

struct GetStatsResponseBuilder {
  typedef GetStatsResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base(::flatbuffers::Offset<FBS::Transport::Stats> base) {
    fbb_.AddOffset(GetStatsResponse::VT_BASE, base);
  }
  void add_tuple(::flatbuffers::Offset<FBS::Transport::Tuple> tuple) {
    fbb_.AddOffset(GetStatsResponse::VT_TUPLE, tuple);
  }
  explicit GetStatsResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GetStatsResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GetStatsResponse>(end);
    fbb_.Required(o, GetStatsResponse::VT_BASE);
    fbb_.Required(o, GetStatsResponse::VT_TUPLE);
    return o;
  }
};

inline ::flatbuffers::Offset<GetStatsResponse> CreateGetStatsResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBS::Transport::Stats> base = 0,
    ::flatbuffers::Offset<FBS::Transport::Tuple> tuple = 0) {
  GetStatsResponseBuilder builder_(_fbb);
  builder_.add_tuple(tuple);
  builder_.add_base(base);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *PipeTransportOptionsTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::OptionsTypeTable,
    FBS::Transport::ListenInfoTypeTable
  };
  static const char * const names[] = {
    "base",
    "listenInfo",
    "enableRtx",
    "enableSrtp"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ConnectRequestTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_USHORT, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::SrtpParametersTypeTable
  };
  static const char * const names[] = {
    "ip",
    "port",
    "srtpParameters"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ConnectResponseTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::TupleTypeTable
  };
  static const char * const names[] = {
    "tuple"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *DumpResponseTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::DumpTypeTable,
    FBS::Transport::TupleTypeTable,
    FBS::Transport::SrtpParametersTypeTable
  };
  static const char * const names[] = {
    "base",
    "tuple",
    "rtx",
    "srtpParameters"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *GetStatsResponseTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::StatsTypeTable,
    FBS::Transport::TupleTypeTable
  };
  static const char * const names[] = {
    "base",
    "tuple"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace PipeTransport
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_PIPETRANSPORT_FBS_PIPETRANSPORT_H_
