// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DIRECTTRANSPORT_FBS_DIRECTTRANSPORT_H_
#define FLATBUFFERS_GENERATED_DIRECTTRANSPORT_FBS_DIRECTTRANSPORT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

#include "transport_generated.h"

namespace FBS {
namespace DirectTransport {

struct DirectTransportOptions;
struct DirectTransportOptionsBuilder;

struct DumpResponse;
struct DumpResponseBuilder;

struct GetStatsResponse;
struct GetStatsResponseBuilder;

struct RtcpNotification;
struct RtcpNotificationBuilder;

inline const ::flatbuffers::TypeTable *DirectTransportOptionsTypeTable();

inline const ::flatbuffers::TypeTable *DumpResponseTypeTable();

inline const ::flatbuffers::TypeTable *GetStatsResponseTypeTable();

inline const ::flatbuffers::TypeTable *RtcpNotificationTypeTable();

struct DirectTransportOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DirectTransportOptionsBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DirectTransportOptionsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4
  };
  const FBS::Transport::Options *base() const {
    return GetPointer<const FBS::Transport::Options *>(VT_BASE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           verifier.EndTable();
  }
};

struct DirectTransportOptionsBuilder {
  typedef DirectTransportOptions Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base(::flatbuffers::Offset<FBS::Transport::Options> base) {
    fbb_.AddOffset(DirectTransportOptions::VT_BASE, base);
  }
  explicit DirectTransportOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DirectTransportOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DirectTransportOptions>(end);
    fbb_.Required(o, DirectTransportOptions::VT_BASE);
    return o;
  }
};

inline ::flatbuffers::Offset<DirectTransportOptions> CreateDirectTransportOptions(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBS::Transport::Options> base = 0) {
  DirectTransportOptionsBuilder builder_(_fbb);
  builder_.add_base(base);
  return builder_.Finish();
}

struct DumpResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DumpResponseBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DumpResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4
  };
  const FBS::Transport::Dump *base() const {
    return GetPointer<const FBS::Transport::Dump *>(VT_BASE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           verifier.EndTable();
  }
};

struct DumpResponseBuilder {
  typedef DumpResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base(::flatbuffers::Offset<FBS::Transport::Dump> base) {
    fbb_.AddOffset(DumpResponse::VT_BASE, base);
  }
  explicit DumpResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DumpResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DumpResponse>(end);
    fbb_.Required(o, DumpResponse::VT_BASE);
    return o;
  }
};

inline ::flatbuffers::Offset<DumpResponse> CreateDumpResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBS::Transport::Dump> base = 0) {
  DumpResponseBuilder builder_(_fbb);
  builder_.add_base(base);
  return builder_.Finish();
}

struct GetStatsResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GetStatsResponseBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return GetStatsResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4
  };
  const FBS::Transport::Stats *base() const {
    return GetPointer<const FBS::Transport::Stats *>(VT_BASE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           verifier.EndTable();
  }
};

struct GetStatsResponseBuilder {
  typedef GetStatsResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base(::flatbuffers::Offset<FBS::Transport::Stats> base) {
    fbb_.AddOffset(GetStatsResponse::VT_BASE, base);
  }
  explicit GetStatsResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GetStatsResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GetStatsResponse>(end);
    fbb_.Required(o, GetStatsResponse::VT_BASE);
    return o;
  }
};

inline ::flatbuffers::Offset<GetStatsResponse> CreateGetStatsResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBS::Transport::Stats> base = 0) {
  GetStatsResponseBuilder builder_(_fbb);
  builder_.add_base(base);
  return builder_.Finish();
}

struct RtcpNotification FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RtcpNotificationBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return RtcpNotificationTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct RtcpNotificationBuilder {
  typedef RtcpNotification Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(RtcpNotification::VT_DATA, data);
  }
  explicit RtcpNotificationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RtcpNotification> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RtcpNotification>(end);
    fbb_.Required(o, RtcpNotification::VT_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<RtcpNotification> CreateRtcpNotification(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  RtcpNotificationBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RtcpNotification> CreateRtcpNotificationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return FBS::DirectTransport::CreateRtcpNotification(
      _fbb,
      data__);
}

inline const ::flatbuffers::TypeTable *DirectTransportOptionsTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::OptionsTypeTable
  };
  static const char * const names[] = {
    "base"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *DumpResponseTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::DumpTypeTable
  };
  static const char * const names[] = {
    "base"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *GetStatsResponseTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::StatsTypeTable
  };
  static const char * const names[] = {
    "base"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *RtcpNotificationTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const char * const names[] = {
    "data"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace DirectTransport
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_DIRECTTRANSPORT_FBS_DIRECTTRANSPORT_H_
