// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATAPRODUCER_FBS_DATAPRODUCER_H_
#define FLATBUFFERS_GENERATED_DATAPRODUCER_FBS_DATAPRODUCER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

#include "sctpParameters_generated.h"

namespace FBS {
namespace DataProducer {

struct DumpResponse;
struct DumpResponseBuilder;

struct GetStatsResponse;
struct GetStatsResponseBuilder;

struct String;
struct StringBuilder;

struct Binary;
struct BinaryBuilder;

struct SendNotification;
struct SendNotificationBuilder;

inline const ::flatbuffers::TypeTable *DumpResponseTypeTable();

inline const ::flatbuffers::TypeTable *GetStatsResponseTypeTable();

inline const ::flatbuffers::TypeTable *StringTypeTable();

inline const ::flatbuffers::TypeTable *BinaryTypeTable();

inline const ::flatbuffers::TypeTable *SendNotificationTypeTable();

enum class Data : uint8_t {
  NONE = 0,
  String = 1,
  Binary = 2,
  MIN = NONE,
  MAX = Binary
};

inline const Data (&EnumValuesData())[3] {
  static const Data values[] = {
    Data::NONE,
    Data::String,
    Data::Binary
  };
  return values;
}

inline const char * const *EnumNamesData() {
  static const char * const names[4] = {
    "NONE",
    "String",
    "Binary",
    nullptr
  };
  return names;
}

inline const char *EnumNameData(Data e) {
  if (::flatbuffers::IsOutRange(e, Data::NONE, Data::Binary)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesData()[index];
}

template<typename T> struct DataTraits {
  static const Data enum_value = Data::NONE;
};

template<> struct DataTraits<FBS::DataProducer::String> {
  static const Data enum_value = Data::String;
};

template<> struct DataTraits<FBS::DataProducer::Binary> {
  static const Data enum_value = Data::Binary;
};

bool VerifyData(::flatbuffers::Verifier &verifier, const void *obj, Data type);
bool VerifyDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Data> *types);

struct DumpResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DumpResponseBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DumpResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TYPE = 6,
    VT_SCTPSTREAMPARAMETERS = 8,
    VT_LABEL = 10,
    VT_PROTOCOL = 12,
    VT_PAUSED = 14
  };
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  const FBS::SctpParameters::SctpStreamParameters *sctpStreamParameters() const {
    return GetPointer<const FBS::SctpParameters::SctpStreamParameters *>(VT_SCTPSTREAMPARAMETERS);
  }
  const ::flatbuffers::String *label() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LABEL);
  }
  const ::flatbuffers::String *protocol() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROTOCOL);
  }
  bool paused() const {
    return GetField<uint8_t>(VT_PAUSED, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffsetRequired(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_SCTPSTREAMPARAMETERS) &&
           verifier.VerifyTable(sctpStreamParameters()) &&
           VerifyOffsetRequired(verifier, VT_LABEL) &&
           verifier.VerifyString(label()) &&
           VerifyOffsetRequired(verifier, VT_PROTOCOL) &&
           verifier.VerifyString(protocol()) &&
           VerifyField<uint8_t>(verifier, VT_PAUSED, 1) &&
           verifier.EndTable();
  }
};

struct DumpResponseBuilder {
  typedef DumpResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(DumpResponse::VT_ID, id);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(DumpResponse::VT_TYPE, type);
  }
  void add_sctpStreamParameters(::flatbuffers::Offset<FBS::SctpParameters::SctpStreamParameters> sctpStreamParameters) {
    fbb_.AddOffset(DumpResponse::VT_SCTPSTREAMPARAMETERS, sctpStreamParameters);
  }
  void add_label(::flatbuffers::Offset<::flatbuffers::String> label) {
    fbb_.AddOffset(DumpResponse::VT_LABEL, label);
  }
  void add_protocol(::flatbuffers::Offset<::flatbuffers::String> protocol) {
    fbb_.AddOffset(DumpResponse::VT_PROTOCOL, protocol);
  }
  void add_paused(bool paused) {
    fbb_.AddElement<uint8_t>(DumpResponse::VT_PAUSED, static_cast<uint8_t>(paused), 0);
  }
  explicit DumpResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DumpResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DumpResponse>(end);
    fbb_.Required(o, DumpResponse::VT_ID);
    fbb_.Required(o, DumpResponse::VT_TYPE);
    fbb_.Required(o, DumpResponse::VT_LABEL);
    fbb_.Required(o, DumpResponse::VT_PROTOCOL);
    return o;
  }
};

inline ::flatbuffers::Offset<DumpResponse> CreateDumpResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<FBS::SctpParameters::SctpStreamParameters> sctpStreamParameters = 0,
    ::flatbuffers::Offset<::flatbuffers::String> label = 0,
    ::flatbuffers::Offset<::flatbuffers::String> protocol = 0,
    bool paused = false) {
  DumpResponseBuilder builder_(_fbb);
  builder_.add_protocol(protocol);
  builder_.add_label(label);
  builder_.add_sctpStreamParameters(sctpStreamParameters);
  builder_.add_type(type);
  builder_.add_id(id);
  builder_.add_paused(paused);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DumpResponse> CreateDumpResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *type = nullptr,
    ::flatbuffers::Offset<FBS::SctpParameters::SctpStreamParameters> sctpStreamParameters = 0,
    const char *label = nullptr,
    const char *protocol = nullptr,
    bool paused = false) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto label__ = label ? _fbb.CreateString(label) : 0;
  auto protocol__ = protocol ? _fbb.CreateString(protocol) : 0;
  return FBS::DataProducer::CreateDumpResponse(
      _fbb,
      id__,
      type__,
      sctpStreamParameters,
      label__,
      protocol__,
      paused);
}

struct GetStatsResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GetStatsResponseBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return GetStatsResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_LABEL = 6,
    VT_PROTOCOL = 8,
    VT_MESSAGESRECEIVED = 10,
    VT_BYTESRECEIVED = 12,
    VT_BUFFEREDAMOUNT = 14
  };
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  const ::flatbuffers::String *label() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LABEL);
  }
  const ::flatbuffers::String *protocol() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROTOCOL);
  }
  uint64_t messagesReceived() const {
    return GetField<uint64_t>(VT_MESSAGESRECEIVED, 0);
  }
  uint64_t bytesReceived() const {
    return GetField<uint64_t>(VT_BYTESRECEIVED, 0);
  }
  uint32_t bufferedAmount() const {
    return GetField<uint32_t>(VT_BUFFEREDAMOUNT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           VerifyOffsetRequired(verifier, VT_LABEL) &&
           verifier.VerifyString(label()) &&
           VerifyOffsetRequired(verifier, VT_PROTOCOL) &&
           verifier.VerifyString(protocol()) &&
           VerifyField<uint64_t>(verifier, VT_MESSAGESRECEIVED, 8) &&
           VerifyField<uint64_t>(verifier, VT_BYTESRECEIVED, 8) &&
           VerifyField<uint32_t>(verifier, VT_BUFFEREDAMOUNT, 4) &&
           verifier.EndTable();
  }
};

struct GetStatsResponseBuilder {
  typedef GetStatsResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(GetStatsResponse::VT_TIMESTAMP, timestamp, 0);
  }
  void add_label(::flatbuffers::Offset<::flatbuffers::String> label) {
    fbb_.AddOffset(GetStatsResponse::VT_LABEL, label);
  }
  void add_protocol(::flatbuffers::Offset<::flatbuffers::String> protocol) {
    fbb_.AddOffset(GetStatsResponse::VT_PROTOCOL, protocol);
  }
  void add_messagesReceived(uint64_t messagesReceived) {
    fbb_.AddElement<uint64_t>(GetStatsResponse::VT_MESSAGESRECEIVED, messagesReceived, 0);
  }
  void add_bytesReceived(uint64_t bytesReceived) {
    fbb_.AddElement<uint64_t>(GetStatsResponse::VT_BYTESRECEIVED, bytesReceived, 0);
  }
  void add_bufferedAmount(uint32_t bufferedAmount) {
    fbb_.AddElement<uint32_t>(GetStatsResponse::VT_BUFFEREDAMOUNT, bufferedAmount, 0);
  }
  explicit GetStatsResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GetStatsResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GetStatsResponse>(end);
    fbb_.Required(o, GetStatsResponse::VT_LABEL);
    fbb_.Required(o, GetStatsResponse::VT_PROTOCOL);
    return o;
  }
};

inline ::flatbuffers::Offset<GetStatsResponse> CreateGetStatsResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t timestamp = 0,
    ::flatbuffers::Offset<::flatbuffers::String> label = 0,
    ::flatbuffers::Offset<::flatbuffers::String> protocol = 0,
    uint64_t messagesReceived = 0,
    uint64_t bytesReceived = 0,
    uint32_t bufferedAmount = 0) {
  GetStatsResponseBuilder builder_(_fbb);
  builder_.add_bytesReceived(bytesReceived);
  builder_.add_messagesReceived(messagesReceived);
  builder_.add_timestamp(timestamp);
  builder_.add_bufferedAmount(bufferedAmount);
  builder_.add_protocol(protocol);
  builder_.add_label(label);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GetStatsResponse> CreateGetStatsResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t timestamp = 0,
    const char *label = nullptr,
    const char *protocol = nullptr,
    uint64_t messagesReceived = 0,
    uint64_t bytesReceived = 0,
    uint32_t bufferedAmount = 0) {
  auto label__ = label ? _fbb.CreateString(label) : 0;
  auto protocol__ = protocol ? _fbb.CreateString(protocol) : 0;
  return FBS::DataProducer::CreateGetStatsResponse(
      _fbb,
      timestamp,
      label__,
      protocol__,
      messagesReceived,
      bytesReceived,
      bufferedAmount);
}

struct String FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StringBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return StringTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct StringBuilder {
  typedef String Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(String::VT_VALUE, value);
  }
  explicit StringBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<String> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<String>(end);
    fbb_.Required(o, String::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<String> CreateString(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  StringBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<String> CreateStringDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *value = nullptr) {
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return FBS::DataProducer::CreateString(
      _fbb,
      value__);
}

struct Binary FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BinaryBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return BinaryTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint8_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct BinaryBuilder {
  typedef Binary Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value) {
    fbb_.AddOffset(Binary::VT_VALUE, value);
  }
  explicit BinaryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Binary> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Binary>(end);
    fbb_.Required(o, Binary::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<Binary> CreateBinary(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value = 0) {
  BinaryBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Binary> CreateBinaryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint8_t>(*value) : 0;
  return FBS::DataProducer::CreateBinary(
      _fbb,
      value__);
}

struct SendNotification FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SendNotificationBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return SendNotificationTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PPID = 4,
    VT_DATA_TYPE = 6,
    VT_DATA = 8,
    VT_SUBCHANNELS = 10,
    VT_REQUIREDSUBCHANNEL = 12
  };
  uint8_t ppid() const {
    return GetField<uint8_t>(VT_PPID, 0);
  }
  FBS::DataProducer::Data data_type() const {
    return static_cast<FBS::DataProducer::Data>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const FBS::DataProducer::String *data_as_String() const {
    return data_type() == FBS::DataProducer::Data::String ? static_cast<const FBS::DataProducer::String *>(data()) : nullptr;
  }
  const FBS::DataProducer::Binary *data_as_Binary() const {
    return data_type() == FBS::DataProducer::Data::Binary ? static_cast<const FBS::DataProducer::Binary *>(data()) : nullptr;
  }
  const ::flatbuffers::Vector<uint16_t> *subchannels() const {
    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_SUBCHANNELS);
  }
  ::flatbuffers::Optional<uint16_t> requiredSubchannel() const {
    return GetOptional<uint16_t, uint16_t>(VT_REQUIREDSUBCHANNEL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PPID, 1) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_DATA) &&
           VerifyData(verifier, data(), data_type()) &&
           VerifyOffset(verifier, VT_SUBCHANNELS) &&
           verifier.VerifyVector(subchannels()) &&
           VerifyField<uint16_t>(verifier, VT_REQUIREDSUBCHANNEL, 2) &&
           verifier.EndTable();
  }
};

template<> inline const FBS::DataProducer::String *SendNotification::data_as<FBS::DataProducer::String>() const {
  return data_as_String();
}

template<> inline const FBS::DataProducer::Binary *SendNotification::data_as<FBS::DataProducer::Binary>() const {
  return data_as_Binary();
}

struct SendNotificationBuilder {
  typedef SendNotification Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ppid(uint8_t ppid) {
    fbb_.AddElement<uint8_t>(SendNotification::VT_PPID, ppid, 0);
  }
  void add_data_type(FBS::DataProducer::Data data_type) {
    fbb_.AddElement<uint8_t>(SendNotification::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(::flatbuffers::Offset<void> data) {
    fbb_.AddOffset(SendNotification::VT_DATA, data);
  }
  void add_subchannels(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> subchannels) {
    fbb_.AddOffset(SendNotification::VT_SUBCHANNELS, subchannels);
  }
  void add_requiredSubchannel(uint16_t requiredSubchannel) {
    fbb_.AddElement<uint16_t>(SendNotification::VT_REQUIREDSUBCHANNEL, requiredSubchannel);
  }
  explicit SendNotificationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SendNotification> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SendNotification>(end);
    fbb_.Required(o, SendNotification::VT_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<SendNotification> CreateSendNotification(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t ppid = 0,
    FBS::DataProducer::Data data_type = FBS::DataProducer::Data::NONE,
    ::flatbuffers::Offset<void> data = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> subchannels = 0,
    ::flatbuffers::Optional<uint16_t> requiredSubchannel = ::flatbuffers::nullopt) {
  SendNotificationBuilder builder_(_fbb);
  builder_.add_subchannels(subchannels);
  builder_.add_data(data);
  if(requiredSubchannel) { builder_.add_requiredSubchannel(*requiredSubchannel); }
  builder_.add_data_type(data_type);
  builder_.add_ppid(ppid);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SendNotification> CreateSendNotificationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t ppid = 0,
    FBS::DataProducer::Data data_type = FBS::DataProducer::Data::NONE,
    ::flatbuffers::Offset<void> data = 0,
    const std::vector<uint16_t> *subchannels = nullptr,
    ::flatbuffers::Optional<uint16_t> requiredSubchannel = ::flatbuffers::nullopt) {
  auto subchannels__ = subchannels ? _fbb.CreateVector<uint16_t>(*subchannels) : 0;
  return FBS::DataProducer::CreateSendNotification(
      _fbb,
      ppid,
      data_type,
      data,
      subchannels__,
      requiredSubchannel);
}

inline bool VerifyData(::flatbuffers::Verifier &verifier, const void *obj, Data type) {
  switch (type) {
    case Data::NONE: {
      return true;
    }
    case Data::String: {
      auto ptr = reinterpret_cast<const FBS::DataProducer::String *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Data::Binary: {
      auto ptr = reinterpret_cast<const FBS::DataProducer::Binary *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Data> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyData(
        verifier,  values->Get(i), types->GetEnum<Data>(i))) {
      return false;
    }
  }
  return true;
}

inline const ::flatbuffers::TypeTable *DataTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::DataProducer::StringTypeTable,
    FBS::DataProducer::BinaryTypeTable
  };
  static const char * const names[] = {
    "NONE",
    "String",
    "Binary"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_UNION, 3, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *DumpResponseTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::SctpParameters::SctpStreamParametersTypeTable
  };
  static const char * const names[] = {
    "id",
    "type",
    "sctpStreamParameters",
    "label",
    "protocol",
    "paused"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 6, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *GetStatsResponseTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_ULONG, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_ULONG, 0, -1 },
    { ::flatbuffers::ET_ULONG, 0, -1 },
    { ::flatbuffers::ET_UINT, 0, -1 }
  };
  static const char * const names[] = {
    "timestamp",
    "label",
    "protocol",
    "messagesReceived",
    "bytesReceived",
    "bufferedAmount"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 6, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *StringTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "value"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *BinaryTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const char * const names[] = {
    "value"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *SendNotificationTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, -1 },
    { ::flatbuffers::ET_UTYPE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_USHORT, 1, -1 },
    { ::flatbuffers::ET_USHORT, 0, -1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::DataProducer::DataTypeTable
  };
  static const char * const names[] = {
    "ppid",
    "data_type",
    "data",
    "subchannels",
    "requiredSubchannel"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace DataProducer
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_DATAPRODUCER_FBS_DATAPRODUCER_H_
