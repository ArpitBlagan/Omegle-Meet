// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAINTRANSPORT_FBS_PLAINTRANSPORT_H_
#define FLATBUFFERS_GENERATED_PLAINTRANSPORT_FBS_PLAINTRANSPORT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

#include "sctpParameters_generated.h"
#include "transport_generated.h"

namespace FBS {
namespace PlainTransport {

struct PlainTransportOptions;
struct PlainTransportOptionsBuilder;

struct ConnectRequest;
struct ConnectRequestBuilder;

struct ConnectResponse;
struct ConnectResponseBuilder;

struct DumpResponse;
struct DumpResponseBuilder;

struct GetStatsResponse;
struct GetStatsResponseBuilder;

struct TupleNotification;
struct TupleNotificationBuilder;

struct RtcpTupleNotification;
struct RtcpTupleNotificationBuilder;

inline const ::flatbuffers::TypeTable *PlainTransportOptionsTypeTable();

inline const ::flatbuffers::TypeTable *ConnectRequestTypeTable();

inline const ::flatbuffers::TypeTable *ConnectResponseTypeTable();

inline const ::flatbuffers::TypeTable *DumpResponseTypeTable();

inline const ::flatbuffers::TypeTable *GetStatsResponseTypeTable();

inline const ::flatbuffers::TypeTable *TupleNotificationTypeTable();

inline const ::flatbuffers::TypeTable *RtcpTupleNotificationTypeTable();

struct PlainTransportOptions FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlainTransportOptionsBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PlainTransportOptionsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4,
    VT_LISTENINFO = 6,
    VT_RTCPLISTENINFO = 8,
    VT_RTCPMUX = 10,
    VT_COMEDIA = 12,
    VT_ENABLESRTP = 14,
    VT_SRTPCRYPTOSUITE = 16
  };
  const FBS::Transport::Options *base() const {
    return GetPointer<const FBS::Transport::Options *>(VT_BASE);
  }
  const FBS::Transport::ListenInfo *listenInfo() const {
    return GetPointer<const FBS::Transport::ListenInfo *>(VT_LISTENINFO);
  }
  const FBS::Transport::ListenInfo *rtcpListenInfo() const {
    return GetPointer<const FBS::Transport::ListenInfo *>(VT_RTCPLISTENINFO);
  }
  bool rtcpMux() const {
    return GetField<uint8_t>(VT_RTCPMUX, 0) != 0;
  }
  bool comedia() const {
    return GetField<uint8_t>(VT_COMEDIA, 0) != 0;
  }
  bool enableSrtp() const {
    return GetField<uint8_t>(VT_ENABLESRTP, 0) != 0;
  }
  const ::flatbuffers::String *srtpCryptoSuite() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SRTPCRYPTOSUITE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           VerifyOffsetRequired(verifier, VT_LISTENINFO) &&
           verifier.VerifyTable(listenInfo()) &&
           VerifyOffset(verifier, VT_RTCPLISTENINFO) &&
           verifier.VerifyTable(rtcpListenInfo()) &&
           VerifyField<uint8_t>(verifier, VT_RTCPMUX, 1) &&
           VerifyField<uint8_t>(verifier, VT_COMEDIA, 1) &&
           VerifyField<uint8_t>(verifier, VT_ENABLESRTP, 1) &&
           VerifyOffset(verifier, VT_SRTPCRYPTOSUITE) &&
           verifier.VerifyString(srtpCryptoSuite()) &&
           verifier.EndTable();
  }
};

struct PlainTransportOptionsBuilder {
  typedef PlainTransportOptions Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base(::flatbuffers::Offset<FBS::Transport::Options> base) {
    fbb_.AddOffset(PlainTransportOptions::VT_BASE, base);
  }
  void add_listenInfo(::flatbuffers::Offset<FBS::Transport::ListenInfo> listenInfo) {
    fbb_.AddOffset(PlainTransportOptions::VT_LISTENINFO, listenInfo);
  }
  void add_rtcpListenInfo(::flatbuffers::Offset<FBS::Transport::ListenInfo> rtcpListenInfo) {
    fbb_.AddOffset(PlainTransportOptions::VT_RTCPLISTENINFO, rtcpListenInfo);
  }
  void add_rtcpMux(bool rtcpMux) {
    fbb_.AddElement<uint8_t>(PlainTransportOptions::VT_RTCPMUX, static_cast<uint8_t>(rtcpMux), 0);
  }
  void add_comedia(bool comedia) {
    fbb_.AddElement<uint8_t>(PlainTransportOptions::VT_COMEDIA, static_cast<uint8_t>(comedia), 0);
  }
  void add_enableSrtp(bool enableSrtp) {
    fbb_.AddElement<uint8_t>(PlainTransportOptions::VT_ENABLESRTP, static_cast<uint8_t>(enableSrtp), 0);
  }
  void add_srtpCryptoSuite(::flatbuffers::Offset<::flatbuffers::String> srtpCryptoSuite) {
    fbb_.AddOffset(PlainTransportOptions::VT_SRTPCRYPTOSUITE, srtpCryptoSuite);
  }
  explicit PlainTransportOptionsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlainTransportOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlainTransportOptions>(end);
    fbb_.Required(o, PlainTransportOptions::VT_BASE);
    fbb_.Required(o, PlainTransportOptions::VT_LISTENINFO);
    return o;
  }
};

inline ::flatbuffers::Offset<PlainTransportOptions> CreatePlainTransportOptions(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBS::Transport::Options> base = 0,
    ::flatbuffers::Offset<FBS::Transport::ListenInfo> listenInfo = 0,
    ::flatbuffers::Offset<FBS::Transport::ListenInfo> rtcpListenInfo = 0,
    bool rtcpMux = false,
    bool comedia = false,
    bool enableSrtp = false,
    ::flatbuffers::Offset<::flatbuffers::String> srtpCryptoSuite = 0) {
  PlainTransportOptionsBuilder builder_(_fbb);
  builder_.add_srtpCryptoSuite(srtpCryptoSuite);
  builder_.add_rtcpListenInfo(rtcpListenInfo);
  builder_.add_listenInfo(listenInfo);
  builder_.add_base(base);
  builder_.add_enableSrtp(enableSrtp);
  builder_.add_comedia(comedia);
  builder_.add_rtcpMux(rtcpMux);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PlainTransportOptions> CreatePlainTransportOptionsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBS::Transport::Options> base = 0,
    ::flatbuffers::Offset<FBS::Transport::ListenInfo> listenInfo = 0,
    ::flatbuffers::Offset<FBS::Transport::ListenInfo> rtcpListenInfo = 0,
    bool rtcpMux = false,
    bool comedia = false,
    bool enableSrtp = false,
    const char *srtpCryptoSuite = nullptr) {
  auto srtpCryptoSuite__ = srtpCryptoSuite ? _fbb.CreateString(srtpCryptoSuite) : 0;
  return FBS::PlainTransport::CreatePlainTransportOptions(
      _fbb,
      base,
      listenInfo,
      rtcpListenInfo,
      rtcpMux,
      comedia,
      enableSrtp,
      srtpCryptoSuite__);
}

struct ConnectRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConnectRequestBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ConnectRequestTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IP = 4,
    VT_PORT = 6,
    VT_RTCPPORT = 8,
    VT_SRTPPARAMETERS = 10
  };
  const ::flatbuffers::String *ip() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IP);
  }
  ::flatbuffers::Optional<uint16_t> port() const {
    return GetOptional<uint16_t, uint16_t>(VT_PORT);
  }
  ::flatbuffers::Optional<uint16_t> rtcpPort() const {
    return GetOptional<uint16_t, uint16_t>(VT_RTCPPORT);
  }
  const FBS::Transport::SrtpParameters *srtpParameters() const {
    return GetPointer<const FBS::Transport::SrtpParameters *>(VT_SRTPPARAMETERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IP) &&
           verifier.VerifyString(ip()) &&
           VerifyField<uint16_t>(verifier, VT_PORT, 2) &&
           VerifyField<uint16_t>(verifier, VT_RTCPPORT, 2) &&
           VerifyOffset(verifier, VT_SRTPPARAMETERS) &&
           verifier.VerifyTable(srtpParameters()) &&
           verifier.EndTable();
  }
};

struct ConnectRequestBuilder {
  typedef ConnectRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ip(::flatbuffers::Offset<::flatbuffers::String> ip) {
    fbb_.AddOffset(ConnectRequest::VT_IP, ip);
  }
  void add_port(uint16_t port) {
    fbb_.AddElement<uint16_t>(ConnectRequest::VT_PORT, port);
  }
  void add_rtcpPort(uint16_t rtcpPort) {
    fbb_.AddElement<uint16_t>(ConnectRequest::VT_RTCPPORT, rtcpPort);
  }
  void add_srtpParameters(::flatbuffers::Offset<FBS::Transport::SrtpParameters> srtpParameters) {
    fbb_.AddOffset(ConnectRequest::VT_SRTPPARAMETERS, srtpParameters);
  }
  explicit ConnectRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ConnectRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ConnectRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ConnectRequest> CreateConnectRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> ip = 0,
    ::flatbuffers::Optional<uint16_t> port = ::flatbuffers::nullopt,
    ::flatbuffers::Optional<uint16_t> rtcpPort = ::flatbuffers::nullopt,
    ::flatbuffers::Offset<FBS::Transport::SrtpParameters> srtpParameters = 0) {
  ConnectRequestBuilder builder_(_fbb);
  builder_.add_srtpParameters(srtpParameters);
  builder_.add_ip(ip);
  if(rtcpPort) { builder_.add_rtcpPort(*rtcpPort); }
  if(port) { builder_.add_port(*port); }
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ConnectRequest> CreateConnectRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *ip = nullptr,
    ::flatbuffers::Optional<uint16_t> port = ::flatbuffers::nullopt,
    ::flatbuffers::Optional<uint16_t> rtcpPort = ::flatbuffers::nullopt,
    ::flatbuffers::Offset<FBS::Transport::SrtpParameters> srtpParameters = 0) {
  auto ip__ = ip ? _fbb.CreateString(ip) : 0;
  return FBS::PlainTransport::CreateConnectRequest(
      _fbb,
      ip__,
      port,
      rtcpPort,
      srtpParameters);
}

struct ConnectResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConnectResponseBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ConnectResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TUPLE = 4,
    VT_RTCPTUPLE = 6,
    VT_SRTPPARAMETERS = 8
  };
  const FBS::Transport::Tuple *tuple() const {
    return GetPointer<const FBS::Transport::Tuple *>(VT_TUPLE);
  }
  const FBS::Transport::Tuple *rtcpTuple() const {
    return GetPointer<const FBS::Transport::Tuple *>(VT_RTCPTUPLE);
  }
  const FBS::Transport::SrtpParameters *srtpParameters() const {
    return GetPointer<const FBS::Transport::SrtpParameters *>(VT_SRTPPARAMETERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_TUPLE) &&
           verifier.VerifyTable(tuple()) &&
           VerifyOffset(verifier, VT_RTCPTUPLE) &&
           verifier.VerifyTable(rtcpTuple()) &&
           VerifyOffset(verifier, VT_SRTPPARAMETERS) &&
           verifier.VerifyTable(srtpParameters()) &&
           verifier.EndTable();
  }
};

struct ConnectResponseBuilder {
  typedef ConnectResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_tuple(::flatbuffers::Offset<FBS::Transport::Tuple> tuple) {
    fbb_.AddOffset(ConnectResponse::VT_TUPLE, tuple);
  }
  void add_rtcpTuple(::flatbuffers::Offset<FBS::Transport::Tuple> rtcpTuple) {
    fbb_.AddOffset(ConnectResponse::VT_RTCPTUPLE, rtcpTuple);
  }
  void add_srtpParameters(::flatbuffers::Offset<FBS::Transport::SrtpParameters> srtpParameters) {
    fbb_.AddOffset(ConnectResponse::VT_SRTPPARAMETERS, srtpParameters);
  }
  explicit ConnectResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ConnectResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ConnectResponse>(end);
    fbb_.Required(o, ConnectResponse::VT_TUPLE);
    return o;
  }
};

inline ::flatbuffers::Offset<ConnectResponse> CreateConnectResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBS::Transport::Tuple> tuple = 0,
    ::flatbuffers::Offset<FBS::Transport::Tuple> rtcpTuple = 0,
    ::flatbuffers::Offset<FBS::Transport::SrtpParameters> srtpParameters = 0) {
  ConnectResponseBuilder builder_(_fbb);
  builder_.add_srtpParameters(srtpParameters);
  builder_.add_rtcpTuple(rtcpTuple);
  builder_.add_tuple(tuple);
  return builder_.Finish();
}

struct DumpResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DumpResponseBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DumpResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4,
    VT_RTCPMUX = 6,
    VT_COMEDIA = 8,
    VT_TUPLE = 10,
    VT_RTCPTUPLE = 12,
    VT_SRTPPARAMETERS = 14
  };
  const FBS::Transport::Dump *base() const {
    return GetPointer<const FBS::Transport::Dump *>(VT_BASE);
  }
  bool rtcpMux() const {
    return GetField<uint8_t>(VT_RTCPMUX, 0) != 0;
  }
  bool comedia() const {
    return GetField<uint8_t>(VT_COMEDIA, 0) != 0;
  }
  const FBS::Transport::Tuple *tuple() const {
    return GetPointer<const FBS::Transport::Tuple *>(VT_TUPLE);
  }
  const FBS::Transport::Tuple *rtcpTuple() const {
    return GetPointer<const FBS::Transport::Tuple *>(VT_RTCPTUPLE);
  }
  const FBS::Transport::SrtpParameters *srtpParameters() const {
    return GetPointer<const FBS::Transport::SrtpParameters *>(VT_SRTPPARAMETERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           VerifyField<uint8_t>(verifier, VT_RTCPMUX, 1) &&
           VerifyField<uint8_t>(verifier, VT_COMEDIA, 1) &&
           VerifyOffsetRequired(verifier, VT_TUPLE) &&
           verifier.VerifyTable(tuple()) &&
           VerifyOffset(verifier, VT_RTCPTUPLE) &&
           verifier.VerifyTable(rtcpTuple()) &&
           VerifyOffset(verifier, VT_SRTPPARAMETERS) &&
           verifier.VerifyTable(srtpParameters()) &&
           verifier.EndTable();
  }
};

struct DumpResponseBuilder {
  typedef DumpResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base(::flatbuffers::Offset<FBS::Transport::Dump> base) {
    fbb_.AddOffset(DumpResponse::VT_BASE, base);
  }
  void add_rtcpMux(bool rtcpMux) {
    fbb_.AddElement<uint8_t>(DumpResponse::VT_RTCPMUX, static_cast<uint8_t>(rtcpMux), 0);
  }
  void add_comedia(bool comedia) {
    fbb_.AddElement<uint8_t>(DumpResponse::VT_COMEDIA, static_cast<uint8_t>(comedia), 0);
  }
  void add_tuple(::flatbuffers::Offset<FBS::Transport::Tuple> tuple) {
    fbb_.AddOffset(DumpResponse::VT_TUPLE, tuple);
  }
  void add_rtcpTuple(::flatbuffers::Offset<FBS::Transport::Tuple> rtcpTuple) {
    fbb_.AddOffset(DumpResponse::VT_RTCPTUPLE, rtcpTuple);
  }
  void add_srtpParameters(::flatbuffers::Offset<FBS::Transport::SrtpParameters> srtpParameters) {
    fbb_.AddOffset(DumpResponse::VT_SRTPPARAMETERS, srtpParameters);
  }
  explicit DumpResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DumpResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DumpResponse>(end);
    fbb_.Required(o, DumpResponse::VT_BASE);
    fbb_.Required(o, DumpResponse::VT_TUPLE);
    return o;
  }
};

inline ::flatbuffers::Offset<DumpResponse> CreateDumpResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBS::Transport::Dump> base = 0,
    bool rtcpMux = false,
    bool comedia = false,
    ::flatbuffers::Offset<FBS::Transport::Tuple> tuple = 0,
    ::flatbuffers::Offset<FBS::Transport::Tuple> rtcpTuple = 0,
    ::flatbuffers::Offset<FBS::Transport::SrtpParameters> srtpParameters = 0) {
  DumpResponseBuilder builder_(_fbb);
  builder_.add_srtpParameters(srtpParameters);
  builder_.add_rtcpTuple(rtcpTuple);
  builder_.add_tuple(tuple);
  builder_.add_base(base);
  builder_.add_comedia(comedia);
  builder_.add_rtcpMux(rtcpMux);
  return builder_.Finish();
}

struct GetStatsResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GetStatsResponseBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return GetStatsResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4,
    VT_RTCPMUX = 6,
    VT_COMEDIA = 8,
    VT_TUPLE = 10,
    VT_RTCPTUPLE = 12
  };
  const FBS::Transport::Stats *base() const {
    return GetPointer<const FBS::Transport::Stats *>(VT_BASE);
  }
  bool rtcpMux() const {
    return GetField<uint8_t>(VT_RTCPMUX, 0) != 0;
  }
  bool comedia() const {
    return GetField<uint8_t>(VT_COMEDIA, 0) != 0;
  }
  const FBS::Transport::Tuple *tuple() const {
    return GetPointer<const FBS::Transport::Tuple *>(VT_TUPLE);
  }
  const FBS::Transport::Tuple *rtcpTuple() const {
    return GetPointer<const FBS::Transport::Tuple *>(VT_RTCPTUPLE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           VerifyField<uint8_t>(verifier, VT_RTCPMUX, 1) &&
           VerifyField<uint8_t>(verifier, VT_COMEDIA, 1) &&
           VerifyOffsetRequired(verifier, VT_TUPLE) &&
           verifier.VerifyTable(tuple()) &&
           VerifyOffset(verifier, VT_RTCPTUPLE) &&
           verifier.VerifyTable(rtcpTuple()) &&
           verifier.EndTable();
  }
};

struct GetStatsResponseBuilder {
  typedef GetStatsResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base(::flatbuffers::Offset<FBS::Transport::Stats> base) {
    fbb_.AddOffset(GetStatsResponse::VT_BASE, base);
  }
  void add_rtcpMux(bool rtcpMux) {
    fbb_.AddElement<uint8_t>(GetStatsResponse::VT_RTCPMUX, static_cast<uint8_t>(rtcpMux), 0);
  }
  void add_comedia(bool comedia) {
    fbb_.AddElement<uint8_t>(GetStatsResponse::VT_COMEDIA, static_cast<uint8_t>(comedia), 0);
  }
  void add_tuple(::flatbuffers::Offset<FBS::Transport::Tuple> tuple) {
    fbb_.AddOffset(GetStatsResponse::VT_TUPLE, tuple);
  }
  void add_rtcpTuple(::flatbuffers::Offset<FBS::Transport::Tuple> rtcpTuple) {
    fbb_.AddOffset(GetStatsResponse::VT_RTCPTUPLE, rtcpTuple);
  }
  explicit GetStatsResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GetStatsResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GetStatsResponse>(end);
    fbb_.Required(o, GetStatsResponse::VT_BASE);
    fbb_.Required(o, GetStatsResponse::VT_TUPLE);
    return o;
  }
};

inline ::flatbuffers::Offset<GetStatsResponse> CreateGetStatsResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBS::Transport::Stats> base = 0,
    bool rtcpMux = false,
    bool comedia = false,
    ::flatbuffers::Offset<FBS::Transport::Tuple> tuple = 0,
    ::flatbuffers::Offset<FBS::Transport::Tuple> rtcpTuple = 0) {
  GetStatsResponseBuilder builder_(_fbb);
  builder_.add_rtcpTuple(rtcpTuple);
  builder_.add_tuple(tuple);
  builder_.add_base(base);
  builder_.add_comedia(comedia);
  builder_.add_rtcpMux(rtcpMux);
  return builder_.Finish();
}

struct TupleNotification FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TupleNotificationBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TupleNotificationTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TUPLE = 4
  };
  const FBS::Transport::Tuple *tuple() const {
    return GetPointer<const FBS::Transport::Tuple *>(VT_TUPLE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_TUPLE) &&
           verifier.VerifyTable(tuple()) &&
           verifier.EndTable();
  }
};

struct TupleNotificationBuilder {
  typedef TupleNotification Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_tuple(::flatbuffers::Offset<FBS::Transport::Tuple> tuple) {
    fbb_.AddOffset(TupleNotification::VT_TUPLE, tuple);
  }
  explicit TupleNotificationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TupleNotification> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TupleNotification>(end);
    fbb_.Required(o, TupleNotification::VT_TUPLE);
    return o;
  }
};

inline ::flatbuffers::Offset<TupleNotification> CreateTupleNotification(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBS::Transport::Tuple> tuple = 0) {
  TupleNotificationBuilder builder_(_fbb);
  builder_.add_tuple(tuple);
  return builder_.Finish();
}

struct RtcpTupleNotification FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RtcpTupleNotificationBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return RtcpTupleNotificationTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TUPLE = 4
  };
  const FBS::Transport::Tuple *tuple() const {
    return GetPointer<const FBS::Transport::Tuple *>(VT_TUPLE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_TUPLE) &&
           verifier.VerifyTable(tuple()) &&
           verifier.EndTable();
  }
};

struct RtcpTupleNotificationBuilder {
  typedef RtcpTupleNotification Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_tuple(::flatbuffers::Offset<FBS::Transport::Tuple> tuple) {
    fbb_.AddOffset(RtcpTupleNotification::VT_TUPLE, tuple);
  }
  explicit RtcpTupleNotificationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RtcpTupleNotification> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RtcpTupleNotification>(end);
    fbb_.Required(o, RtcpTupleNotification::VT_TUPLE);
    return o;
  }
};

inline ::flatbuffers::Offset<RtcpTupleNotification> CreateRtcpTupleNotification(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBS::Transport::Tuple> tuple = 0) {
  RtcpTupleNotificationBuilder builder_(_fbb);
  builder_.add_tuple(tuple);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *PlainTransportOptionsTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::OptionsTypeTable,
    FBS::Transport::ListenInfoTypeTable
  };
  static const char * const names[] = {
    "base",
    "listenInfo",
    "rtcpListenInfo",
    "rtcpMux",
    "comedia",
    "enableSrtp",
    "srtpCryptoSuite"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 7, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ConnectRequestTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_USHORT, 0, -1 },
    { ::flatbuffers::ET_USHORT, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::SrtpParametersTypeTable
  };
  static const char * const names[] = {
    "ip",
    "port",
    "rtcpPort",
    "srtpParameters"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ConnectResponseTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::TupleTypeTable,
    FBS::Transport::SrtpParametersTypeTable
  };
  static const char * const names[] = {
    "tuple",
    "rtcpTuple",
    "srtpParameters"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *DumpResponseTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::DumpTypeTable,
    FBS::Transport::TupleTypeTable,
    FBS::Transport::SrtpParametersTypeTable
  };
  static const char * const names[] = {
    "base",
    "rtcpMux",
    "comedia",
    "tuple",
    "rtcpTuple",
    "srtpParameters"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 6, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *GetStatsResponseTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::StatsTypeTable,
    FBS::Transport::TupleTypeTable
  };
  static const char * const names[] = {
    "base",
    "rtcpMux",
    "comedia",
    "tuple",
    "rtcpTuple"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *TupleNotificationTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::TupleTypeTable
  };
  static const char * const names[] = {
    "tuple"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *RtcpTupleNotificationTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::TupleTypeTable
  };
  static const char * const names[] = {
    "tuple"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace PlainTransport
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_PLAINTRANSPORT_FBS_PLAINTRANSPORT_H_
